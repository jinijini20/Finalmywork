Source URL: https://developers.google.com/maps/documentation/solar/visualize_data_layers?hl=ko
Title: TypeScript에서 데이터 레이어 시각화

의견 보내기

TypeScript에서 데이터 레이어 시각화

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

데이터 레이어 [https://developers.google.com/maps/documentation/solar/data-layers?hl=ko] 응답은 GeoTIFF 파일 [https://en.wikipedia.org/wiki/GeoTIFF]로 제공됩니다. 자체 도구를 사용하여 관심 있는 데이터를 가져올 수 있습니다. 예를 들어 특정 지역의 온도 값을 보여주는 GeoTIFF 이미지가 있다고 가정해 보겠습니다. TypeScript를 사용하면 낮은 온도를 파란색으로, 높은 온도를 빨간색으로 매핑하여 온도 패턴을 시각화할 때 즉시 이해할 수 있는 다채로운 이미지를 만들 수 있습니다.

이 TypeScript 코드는 GeoTIFF라는 특수 이미지 파일을 가져와 HTML 캔버스 (디지털 액자처럼)를 사용하여 웹사이트에 표시하도록 설계되었습니다.
이 코드는 다음 구성요소를 사용합니다.

GeoTIFF 이미지: GeoTIFF는 여러 레이어의 이미지 데이터를 저장할 수 있으므로 지도 또는 과학적 분석에 유용합니다.
RGB 이미지: 사진과 같이 가장 익숙한 이미지 유형입니다. 모든 픽셀에는 색상을 결정하는 빨간색, 녹색, 파란색 값이 있습니다.
팔레트: 페인트 세트와 같습니다. 이미지에 색상을 지정하는 데 사용할 수 있는 사전 정의된 색상 목록이 포함되어 있습니다.

이 페이지에서는 픽셀 데이터 값 (색상 값 및 기타 속성을 포함하여 디지털 이미지의 개별 픽셀에 저장된 정보)을 가져오고 GeoTIFF에서 위도와 경도를 계산하여 TypeScript 객체에 저장하는 방법을 보여줍니다.

다음 코드 스니펫은 이 예에서 관심 있는 데이터를 저장하는 유형 정의를 보여줍니다. 필드와 데이터 유형은 TypeScript의 'type [https://www.typescripttutorial.net/typescript-tutorial/typescript-types]'입니다. 이 특정 예에서는 유형 검사를 허용하여 유형 오류를 줄이고 코드에 안정성을 추가하여 유지관리를 더 쉽게 할 수 있도록 했습니다. 픽셀 값과 위도/경도 경계 상자와 같은 여러 값을 반환하기 위해 해당 데이터를 저장할 유형을 정의합니다.

export interface GeoTiff {
canvas.height = mask ? mask.height : rgb.height;

img.data[imgIdx + 1] = rgb.rasters[1][rgbIdx]; // Green
img.data[imgIdx + 2] = rgb.rasters[2][rgbIdx]; // Blue
img.data[imgIdx + 3] = mask // Alpha
? mask.rasters[0][maskIdx] * 255
: 255;
return canvas;
mask,
colors,
min,
max,
index,
colors?: string[];
min?: number;
max?: number;
index?: number;
return renderRGB(
...data,
.fill(0)
.map((_, i) => {

GeoTIFF 파일 정보 [https://developers.google.com/maps/documentation/solar/geotiff?hl=ko]

의견 보내기