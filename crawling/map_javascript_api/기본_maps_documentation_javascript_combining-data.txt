Tab: 기본
Source URL: https://developers.google.com/maps/documentation/javascript/combining-data?hl=ko

이 페이지는 Cloud Translation API [https://cloud.google.com/translate/?hl=ko]를 통해 번역되었습니다.
홈 [https://developers.google.com/?hl=ko]
제품 [https://developers.google.com/products?hl=ko]
Google Maps Platform [https://developers.google.com/maps?hl=ko]
문서 [https://developers.google.com/maps/documentation?hl=ko]
Web [https://developers.google.com/maps/web?hl=ko]
Maps JavaScript API [https://developers.google.com/maps/documentation/javascript?hl=ko]
의견 보내기
여러 데이터 소스 결합 및 시각화
개요
이 튜토리얼에서는 Google 지도에 여러 소스의 데이터를 표시하는 방법을 설명합니다. 예를 들어 아래의 등치지역도에서는 두 개의 서로 다른 소스를 사용하여 미국의 여러 주를 강조표시하고 주별 데이터를 표시합니다.
지도에는 GeoJSON 파일의 데이터를 사용하여 미국의 주 경계를 정의하는 다각형이 표시됩니다. 또한 시뮬레이션된 US Census API 쿼리에서 가져온, 각 주에 해당하는 데이터도 표시됩니다.
컨트롤 드롭다운 메뉴에서 데이터 카테고리를 선택하여 지도의 다각형을 업데이트합니다. 지도의 데이터 상자 컨트롤에서 주 다각형 위로 마우스를 가져가 주별 정보를 확인할 수도 있습니다.
아래 샘플은 이 지도를 만드는 데 필요한 전체 코드를 보여줍니다.
샘플 사용해 보기
JSFiddle.net [https://jsfiddle.net/gh/get/library/pure/googlemaps/js-samples/tree/master/dist/samples/combining-data/jsfiddle]
Google Cloud Shell [https://ssh.cloud.google.com/cloudshell/editor?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fgooglemaps%2Fjs-samples&cloudshell_git_branch=sample-combining-data&cloudshell_tutorial=cloud_shell_instructions.md&cloudshell_workspace=.&hl=ko]
시작하기
이 튜토리얼의 코드를 사용하여 자신만의 등치지역도 버전을 개발할 수 있습니다. 이렇게 하려면 텍스트 편집기에서 새 파일을 만들어 index.html로 저장하세요.
이 파일에 추가할 수 있는 코드를 이해하려면 다음 섹션을 읽어보세요.
기본 지도 만들기
이 섹션에서는 기본 지도를 설정하는 코드를 설명합니다. 이 방법은 Maps JavaScript API를 시작할 때 지도를 만든 방법과 비슷합니다.
아래 코드를 index.html 파일에 복사합니다. 이 코드는 Maps JavaScript API를 로드하고 지도를 전체 화면으로 만듭니다.
<!DOCTYPE html>
<html>
  <head>
  <meta charset="utf-8">
      <meta name="viewport" content="initial-scale=1.0, user-scalable=no" />
      <title>Mashups with google.maps.Data</title>
      <style>
        #map {
          height: 100%;
        }
        /* Optional: Makes the sample page fill the window. */
        html, body {
          height: 100%;
          margin: 0;
          padding: 0;
        }
      </style>
  </head>
  <body>
    <div id="map"></div>
    <script>
      function initMap() {

        // load the map
        map = new google.maps.Map(document.getElementById('map'), {
          center: {lat: 40, lng: -100},
          zoom: 4,
          styles: mapStyle
        });

        var mapStyle = [{
          'featureType': 'all',
          'elementType': 'all',
          'stylers': [{'visibility': 'off'}]
        }, {
          'featureType': 'landscape',
          'elementType': 'geometry',
          'stylers': [{'visibility': 'on'}, {'color': '#fcfcfc'}]
        }, {
          'featureType': 'water',
          'elementType': 'labels',
          'stylers': [{'visibility': 'off'}]
        }, {
          'featureType': 'water',
          'elementType': 'geometry',
          'stylers': [{'visibility': 'on'}, {'hue': '#5f94ff'}, {'lightness': 60}]
        }];
      }

    </script>
    <script defer
        src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&callback=initMap">
    </script>
  </body>
</html>
첫 번째 스크립트 태그 내의 코드는 지도 객체를 초기화하는 initMap이라는 함수를 만들어 프로그램을 실행하는 시작점입니다.
위 코드의 스타일러는 지도에서 도로, 관심 장소, 가로 모드, 행정 구역 등 모든 elementTypes 및 이러한 요소의 모든 featureTypes가 표시되지 않게 설정합니다. 사용 가능한 모든 featureType 및 elementType 값의 목록은 JSON 스타일 참조 [https://developers.google.com/maps/documentation/javascript/style-reference?hl=ko]를 참고하세요.
코드 샘플에서 YOUR_API_KEY를 클릭하거나 안내에 따라 API 키를 가져옵니다 [https://developers.google.com/maps/documentation/javascript/get-api-key?hl=ko]. YOUR_API_KEY를 애플리케이션의 API 키로 바꾸세요. API가 완전히 로드된 후 아래 스크립트 태그의 콜백 매개변수가 HTML 파일의 initMap() 함수를 실행합니다.
<script> defer
    src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&callback=initMap"
</script>
지도 컨트롤 만들기 및 스타일 지정
아래 코드는 지도에 다음과 같은 컨트롤을 만듭니다.
5가지 데이터 옵션이 있는 드롭다운 메뉴가 포함된 컨트롤
지도 범례
다각형 위로 마우스를 가져가면 표시되는 주별 데이터를 표시하는 데이터 상자
<div id="controls" class="nicebox">
  <div>
  <select id="census-variable">
    <option value="https://storage.googleapis.com/mapsdevsite/json/DP02_0066PE">Percent of population over 25 that completed high
    school</option>
    <option value="https://storage.googleapis.com/mapsdevsite/json/DP05_0017E">Median age</option>
    <option value="https://storage.googleapis.com/mapsdevsite/json/DP05_0001E">Total population</option>
    <option value="https://storage.googleapis.com/mapsdevsite/json/DP02_0016E">Average family size</option>
    <option value="https://storage.googleapis.com/mapsdevsite/json/DP03_0088E">Per-capita income</option>
  </select>
  </div>
  <div id="legend">
    <div id="census-min">min</div>
    <div class="color-key"><span id="data-caret">◆</span></div>
    <div id="census-max">max</div>
  </div>
</div>
<div id="data-box" class="nicebox">
  <label id="data-label" for="data-value"></label>
  <span id="data-value"></span>
</div>
지도 컨트롤의 스타일을 지정하려면 style 태그 내에 아래 코드를 사용하세요.
<style>
  html, body, #map { height: 100%; margin: 0; padding: 0; overflow: hidden; }
    .nicebox {
      position: absolute;
      text-align: center;
      font-family: "Roboto", "Arial", sans-serif;
      font-size: 13px;
      z-index: 5;
      box-shadow: 0 4px 6px -4px #333;
      padding: 5px 10px;
      background: rgb(255,255,255);
      background: linear-gradient(to bottom,rgba(255,255,255,1) 0%,rgba(245,245,245,1) 100%);
      border: rgb(229, 229, 229) 1px solid;
    }
    #controls {
      top: 10px;
      left: 110px;
      width: 360px;
      height: 45px;
    }
    #data-box {
      top: 10px;
      left: 500px;
      height: 45px;
      line-height: 45px;
      display: none;
    }
    #census-variable {
      width: 360px;
      height: 20px;
    }
    #legend { display: flex; display: -webkit-box; padding-top: 7px }
    .color-key {
      background: linear-gradient(to right,
        hsl(5, 69%, 54%) 0%,
        hsl(29, 71%, 51%) 17%,
        hsl(54, 74%, 47%) 33%,
        hsl(78, 76%, 44%) 50%,
        hsl(102, 78%, 41%) 67%,
        hsl(127, 81%, 37%) 83%,
        hsl(151, 83%, 34%) 100%);
      flex: 1;
      -webkit-box-flex: 1;
      margin: 0 5px;
      text-align: left;
      font-size: 1.0em;
      line-height: 1.0em;
    }
    #data-value { font-size: 2.0em; font-weight: bold }
    #data-label { font-size: 2.0em; font-weight: normal; padding-right: 10px; }
    #data-label:after { content: ':' }
    #data-caret { margin-left: -5px; display: none; font-size: 14px; width: 14px}
</style>
US Census API에서 데이터 가져오기
아래 코드는 미국 인구조사국에 모든 미국 주의 최신 인구조사 데이터를 쿼리하여 JSON 형식으로 수신합니다.
function loadCensusData(variable) {
// load the requested variable from the census API
var xhr = new XMLHttpRequest();
xhr.open('GET', 'http://api.census.gov/data/2012/acs5/profile?get=' +
  variable + '&for=state:*&key=YOUR_API_KEY');
        xhr.onload = function() {
          var censusData = JSON.parse(xhr.responseText);
          censusData.shift(); // the first row contains column names
          censusData.forEach(function(row) {
            var censusVariable = parseFloat(row[0]);
            var stateId = row[1];

            // keep track of min and max values
            if (censusVariable < censusMin) {
              censusMin = censusVariable;
            }
            if (censusVariable > censusMax) {
              censusMax = censusVariable;
            }

            // update the existing row with the new data
            map.data
              .getFeatureById(stateId)
              .setProperty('census_variable', censusVariable);
          });

          // update and display the legend
          document.getElementById('census-min').textContent =
              censusMin.toLocaleString();
          document.getElementById('census-max').textContent =
              censusMax.toLocaleString();
        };
        xhr.send();
}
데이터 스타일 지정
아래 코드는 인구조사 데이터 값을 기반으로 데이터 세트의 각 다각형에 그라데이션을 적용하여 등치지역도를 만듭니다. Data.StyleOptions [https://developers.google.com/maps/documentation/javascript/reference?hl=ko#Data.StyleOptions] 객체 또는 Data.StyleOptions 객체를 반환하는 함수를 사용하여 데이터의 스타일을 지정할 수 있습니다.
// set up the style rules and events for google.maps.Data
map.data.setStyle(styleFeature);

      function styleFeature(feature) {
        var low = [5, 69, 54];  // color of smallest datum
        var high = [151, 83, 34];   // color of largest datum

        // delta represents where the value sits between the min and max
        var delta = (feature.getProperty('census_variable') - censusMin) /
            (censusMax - censusMin);

        var color = [];
        for (var i = 0; i < 3; i++) {
          // calculate an integer color based on the delta
          color[i] = (high[i] - low[i]) * delta + low[i];
        }

        // determine whether to show this shape or not
        var showRow = true;
        if (feature.getProperty('census_variable') == null ||
            isNaN(feature.getProperty('census_variable'))) {
          showRow = false;
        }

        var outlineWeight = 0.5, zIndex = 1;
        if (feature.getProperty('state') === 'hover') {
          outlineWeight = zIndex = 2;
        }

        return {
          strokeWeight: outlineWeight,
          strokeColor: '#fff',
          zIndex: zIndex,
          fillColor: 'hsl(' + color[0] + ',' + color[1] + '%,' + color[2] + '%)',
          fillOpacity: 0.75,
          visible: showRow
        };
      }
아래 코드에서는 다각형에 색상을 지정하는 것 외에도 마우스 동작에 응답하는 이벤트를 추가하여 대화형 요소를 만듭니다. 다각형 위로 마우스를 가져가면 주 경계선이 강조표시되고 지도의 데이터 상자 컨트롤이 동시에 업데이트됩니다.
// set up the style rules and events for google.maps.Data
map.data.addListener('mouseover', mouseInToRegion);
map.data.addListener('mouseout', mouseOutOfRegion);

      /**
       * Responds to the mouse-in event on a map shape (state).
       *
       * @param {?google.maps.MapMouseEvent} e
       */
      function mouseInToRegion(e) {
        // set the hover state so the setStyle function can change the border
        e.feature.setProperty('state', 'hover');

        var percent = (e.feature.getProperty('census_variable') - censusMin) /
            (censusMax - censusMin) * 100;

        // update the label
        document.getElementById('data-label').textContent =
            e.feature.getProperty('NAME');
        document.getElementById('data-value').textContent =
            e.feature.getProperty('census_variable').toLocaleString();
        document.getElementById('data-box').style.display = 'block';
        document.getElementById('data-caret').style.display = 'block';
        document.getElementById('data-caret').style.paddingLeft = percent + '%';
      }

      /**
       * Responds to the mouse-out event on a map shape (state).
       *
       * @param {?google.maps.MapMouseEvent} e
       */
      function mouseOutOfRegion(e) {
        // reset the hover state, returning the border to normal
        e.feature.setProperty('state', 'normal');
      }
주 경계 다각형 로드
전체 initMap 함수 뒤에 아래 코드를 추가합니다. loadMapShapes 함수는 loadGeoJson [https://developers.google.com/maps/documentation/javascript/reference?hl=ko#Data] 메서드를 사용하여 GeoJSON 파일에서 미국 주 경계의 다각형을 로드합니다.
/** Loads the state boundary polygons from a GeoJSON source. */
function loadMapShapes() {
  // load US state outline polygons from a GeoJSON file
  map.data.loadGeoJson('https://storage.googleapis.com/mapsdevsite/json/states.js', { idPropertyName: 'STATE' });
아래 행을 initMap 함수 끝에 추가합니다.
  // state polygons only need to be loaded once, do them now
  loadMapShapes();
지도 컨트롤 드롭다운 메뉴에서 데이터 소스 옵션을 선택하면 지도가 지정된 변수를 US Census Data API [http://www.census.gov/developers/]에 쿼리합니다. 인구조사 데이터를 도형 데이터와 연결하기 위해 코드에서는 idPropertyName [https://developers.google.com/maps/documentation/javascript/reference?hl=ko#Data.GeoJsonOptions]을 인구조사 데이터 및 GeoJson 모두에서 공통 키인 'STATE'로 설정합니다.
추가 정보
이 데모에서는 Census Bureau Data API [http://www.census.gov/developers/]를 사용하지만 인구조사국에서 보증하거나 인구조사국의 인증을 받지 않았습니다.
의견 보내기