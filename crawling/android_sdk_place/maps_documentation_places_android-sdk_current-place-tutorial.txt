Source URL: https://developers.google.com/maps/documentation/places/android-sdk/current-place-tutorial?hl=ko

이 페이지는 Cloud Translation API를 통해 번역되었습니다.
홈
제품
Google Maps Platform
문서
Android
Places SDK for Android
가이드
의견 보내기
지도에서 현재 장소 선택 및 세부정보 표시하기
Android 기기의 현재 위치를 찾고 해당 위치에 있는 장소(비즈니스 또는 기타 관심 장소)의 세부정보를 표시하는 방법을 알아보세요. Android용 Maps SDK, Android용 Places SDK, Google Play 서비스 위치 API의 통합 위치 정보 제공자를 사용하여 Android 앱을 빌드하려면 이 튜토리얼을 따르세요.
참고: 이 튜토리얼의 내용을 따르려면 Google Play 서비스 11.2.0 이상이 필요합니다.
코드 가져오기
GitHub에서 Google Maps Android API v2 샘플 저장소를 클론하거나 다운로드하세요.
활동의 자바 버전을 확인하세요.
코드 표시/숨기기
활동의 Kotlin 버전을 확인하세요.
코드 표시/숨기기
개발 프로젝트 설정
다음 단계에 따라 Android 스튜디오에서 튜토리얼 프로젝트를 만듭니다.
Android 스튜디오를 다운로드하여 설치합니다.
Android 스튜디오에 Google Play 서비스 패키지를 추가합니다.
이 튜토리얼을 읽기 전에 Google Maps Android API v2 샘플 저장소를 클론하거나 다운로드합니다.
튜토리얼 프로젝트를 가져옵니다.
Android 스튜디오에서 File > New > Import Project를 선택합니다.
Google Maps Android API v2 샘플 저장소를 다운로드한 후 저장한 위치로 이동합니다.
다음 위치에서 CurrentPlaceDetailsOnMap 프로젝트를 찾습니다.
PATH-TO-SAVED-REPO/android-samples/tutorials/java/CurrentPlaceDetailsOnMap(Java) 또는
PATH-TO-SAVED-REPO/android-samples/tutorials/kotlin/CurrentPlaceDetailsOnMap(Kotlin)
프로젝트 디렉터리를 선택한 다음 Open을 클릭합니다. 이제 Android 스튜디오에서 Gradle 빌드 도구를 사용하여 프로젝트를 빌드합니다.
필요한 API 사용 설정 및 API 키 가져오기
이 튜토리얼을 완료하려면 필요한 API가 사용 설정되고 Android용 Maps SDK를 사용할 수 있도록 승인된 API 키가 포함된 Google Cloud 프로젝트가 필요합니다. 자세한 내용은 다음을 참고하세요.
Google Cloud 프로젝트 설정
API 키 사용하기
참고: 이 튜토리얼에서는 Places API 및 Android용 Maps SDK를 사용 설정해야 합니다.
사용 설정된 API를 보려면 Cloud 콘솔의 Google Maps Platform 페이지로 이동하여 프로젝트를 선택하세요.
Google Maps Platform 페이지로 이동
프로젝트에서 Places API가 사용 설정되어 있지 않은 경우, 이를 사용 설정해야 합니다.
Places API 사용 설정
API 키에 제한사항을 추가하는 경우 키에 Places API를 추가해야 합니다. 자세한 내용은 API 키 사용을 참고하세요.
앱에 API 키 추가
프로젝트의 local.properties 파일을 엽니다.
다음 문자열을 추가한 다음 YOUR_API_KEY를 API 키 값으로 대체합니다.
MAPS_API_KEY=YOUR_API_KEY
앱을 빌드할 때 Android용 Secrets Gradle 플러그인에서 API 키를 복사하여 이를 Android 매니페스트에서 빌드 변수로 제공합니다.
앱 빌드 및 실행
컴퓨터에 Android 기기를 연결합니다. 안내에 따라 Android 기기에서 개발자 옵션을 사용 설정하고 기기를 감지하도록 시스템을 구성합니다.
또는 Android Virtual DeviceAndroid(AVD) Manager를 사용하여 가상 기기를 구성할 수 있습니다. 에뮬레이터를 선택할 때 Google API가 포함된 이미지를 선택해야 합니다. 자세한 내용은 Android 스튜디오 프로젝트 설정을 참조하세요.
Android 스튜디오에서 Run 메뉴 옵션(또는 재생 버튼 아이콘)을 클릭합니다. 표시되는 메시지에 따라 기기를 선택합니다.
Android 스튜디오에서 Gradle을 호출하여 앱을 빌드한 다음 기기 또는 에뮬레이터에서 앱을 실행합니다. 이 페이지의 이미지와 비슷하게, 내 현재 위치를 중심으로 주변에 여러 개의 마커가 있는 지도가 표시됩니다.
장소 가져오기를 선택하여 현재 위치 주변의 장소(비즈니스 또는 관심 장소) 목록을 엽니다.
목록에서 장소를 선택합니다. 지도에 선택한 장소의 마커가 추가됩니다.
문제 해결:
지도가 표시되지 않으면 위에서 설명한 대로 API 키를 가져와 앱에 추가했는지 확인하세요. Android 스튜디오의 Android Monitor에 있는 로그에 API 키 관련 오류 메시지가 있는지 확인하세요.
지도에서 시드니 하버 브리지(앱에서 지정된 기본 위치)에 마커가 하나만 표시되면 앱에 위치 정보 액세스 권한을 부여했는지 확인하세요. Android 권한 가이드에 설명된 패턴에 따라, 런타임 시 위치 정보 액세스 권한을 요청하는 메시지가 앱에 표시됩니다. 설정 > 앱 > 앱 이름 > 권한 > 위치를 선택하여 기기에서 직접 권한을 설정할 수도 있습니다. 코드에서 권한을 처리하는 방법을 자세히 알아보려면 아래에 나온 앱에서 위치 정보 액세스 권한 요청 가이드를 읽어보세요.
Android 스튜디오 디버깅 도구를 사용하여 로그를 확인하고 앱을 디버그하세요.
코드 이해하기
여기에서는 유사한 앱을 빌드하는 방법을 이해할 수 있도록 CurrentPlaceDetailsOnMap 앱의 가장 중요한 부분을 설명합니다.
Places API 클라이언트 인스턴스화
이 객체는 Android용 Places SDK의 기본 진입점입니다.
Places 클래스는 Android용 Places SDK의 클라이언트를 만들고 관리합니다.
PlacesClient 인터페이스는 기기의 현재 위치와 위치 근처의 장소를 검색합니다.
LocationServices 인터페이스는 Android 위치 서비스의 기본 진입점입니다.
API를 사용하려면 프래그먼트 또는 활동의 onCreate() 메서드에서 다음을 실행하세요.
Places 객체를 초기화합니다.
PlacesClient 객체를 만듭니다.
FusedLocationProviderClient 객체를 만듭니다.
예:
위치 정보 액세스 권한 요청
기기의 위치를 확인하고 사용자가 지도에서 내 위치 버튼을 탭할 수 있게 하려면 앱에서 위치 정보 액세스 권한을 요청해야 합니다.
이 튜토리얼에서는 상세한 위치 정보 액세스 권한을 요청하는 데 필요한 코드를 제공합니다. 자세한 내용은 Android 권한 가이드를 참고하세요.
Android 매니페스트에 권한을 <manifest> 요소의 하위 요소로 추가합니다.
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.currentplacedetailsonmap">
    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
</manifest>
앱에서 런타임 권한을 요청하여 사용자에게 위치 정보 액세스 권한을 허용 또는 거부할 수 있는 기회를 제공합니다. 다음 코드는 사용자가 상세한 위치 정보 액세스 권한을 부여했는지 확인합니다. 부여하지 않은 경우 권한을 요청합니다.
권한 요청의 결과를 처리하도록 onRequestPermissionsResult() 콜백을 재정의합니다.
이 튜토리얼의 후반부에서 updateLocationUI() 메서드에 대해 설명합니다.
지도 추가
Android용 Maps SDK를 사용하여 지도를 표시합니다.
활동의 레이아웃 파일인 activity_maps.xml에 <fragment> 요소를 추가합니다. 이 요소는 지도의 컨테이너 역할을 하고 GoogleMap 객체에 대한 액세스 권한을 제공하도록 SupportMapFragment를 정의합니다. 이 튜토리얼에서는 이전 버전 Android 프레임워크와의 호환성을 위해 지도 프래그먼트의 Android 지원 라이브러리 버전을 사용합니다.
<!--
 Copyright 2020 Google LLC

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<fragment xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/map"
    android:name="com.google.android.gms.maps.SupportMapFragment"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context="com.example.currentplacedetailsonmap.MapsActivityCurrentPlace" />
활동의 onCreate() 메서드에서 레이아웃 파일을 콘텐츠 뷰로 설정합니다.
OnMapReadyCallback 인터페이스를 구현하고, GoogleMap 객체를 사용할 수 있을 때 지도를 설정하도록 onMapReady() 메서드를 재정의합니다.
활동의 onCreate() 메서드에서 FragmentManager.findFragmentById()를 호출하여 지도 프래그먼트에 핸들을 가져옵니다. 그런 다음 getMapAsync()를 사용하여 지도 콜백에 등록합니다.
updateLocationUI() 메서드를 작성하여 지도에 위치 컨트롤을 설정합니다. 사용자가 위치 정보 액세스 권한을 부여한 경우 지도의 내 위치 레이어 및 관련 컨트롤을 사용 설정하고, 부여하지 않은 경우 레이어와 컨트롤을 사용 중지하고 현재 위치를 null로 설정합니다.
Android 기기의 위치 가져오기 및 지도 위치 지정
통합 위치 정보 제공자를 사용하여 마지막으로 알려진 기기 위치를 찾은 다음 해당 위치를 사용해 지도의 위치를 지정합니다. 이 튜토리얼에서 필요한 코드를 제공합니다. 기기 위치 가져오기에 대한 자세한 내용은 Google Play 서비스 위치 API의 통합 위치 정보 제공자에 대한 가이드를 참고하세요.
현재 장소 가져오기
Android용 Places SDK를 사용하면 현재의 기기 위치에 있는 예상 장소 목록을 가져올 수 있습니다. 이 컨텍스트에서 장소는 비즈니스 또는 기타 관심 장소입니다.
이 튜토리얼에서는 사용자가 장소 가져오기 버튼을 클릭할 때 현재 장소를 가져옵니다. 이 버튼은 선택할 수 있는 예상 장소 목록을 사용자에게 제공한 다음 지도에서 사용자가 선택한 장소의 위치에 마커를 추가합니다. 이 튜토리얼에서는 Android용 Places SDK와 상호작용하는 데 필요한 코드를 제공합니다. 자세한 내용은 현재 장소 가져오기 가이드를 참고하세요.
옵션 메뉴에 대한 레이아웃 파일(current_place_menu.xml)을 만들고 옵션 메뉴를 설정하도록 onCreateOptionsMenu() 메서드를 재정의합니다. 코드와 함께 제공되는 샘플 앱을 참고하세요.
사용자가 장소 가져오기 옵션을 클릭할 때 현재 장소를 가져오도록 onOptionsItemSelected() 메서드를 재정의합니다.
showCurrentPlace() 메서드를 작성하여 현재 기기 위치의 예상 장소 목록을 가져옵니다.
openPlacesDialog() 메서드를 작성하여 사용자가 예상 장소 목록에서 장소를 선택할 수 있는 양식을 표시합니다. 선택한 장소의 지도에 마커를 추가합니다. 마커 콘텐츠에는 장소의 이름과 주소, API에서 제공하는 모든 저작자 표시가 포함됩니다.
정보 창 콘텐츠의 맞춤 레이아웃을 생성합니다. 이렇게 하면 정보 창에 여러 줄의 콘텐츠를 표시할 수 있습니다. 먼저, 정보 창 제목의 텍스트 뷰, 스니펫의 다른 텍스트 뷰(정보 창의 텍스트 콘텐츠)가 포함된 XML 레이아웃 파일인 custom_info_contents.xml을 추가합니다.
<?xml version="1.0" encoding="utf-8"?>
<!--
 Copyright 2020 Google LLC

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:layoutDirection="locale"
    android:orientation="vertical">
    <TextView
        android:id="@+id/title"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_gravity="center_horizontal"
        android:textColor="#ff000000"
        android:textStyle="bold" />

    <TextView
        android:id="@+id/snippet"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:textColor="#ff7f7f7f" />
</LinearLayout>
InfoWindowAdapter 인터페이스를 구현하여 레이아웃을 확장하고 정보 창 콘텐츠를 로드합니다.
참고: 기본적으로 Android용 Maps SDK는 사용자가 마커를 탭할 때 정보 창의 콘텐츠를 표시합니다. 기본 동작 사용만으로 충분한 경우 마커에 클릭 리스너를 추가할 필요가 없습니다.
지도의 상태 저장
지도의 카메라 위치와 기기 위치를 저장합니다. 사용자가 Android 기기를 회전하거나 구성을 변경하면 Android 프레임워크에서 지도 활동을 삭제하고 재구성합니다. 원활한 사용자 환경을 유지하려면 관련 애플리케이션 상태를 저장했다가 필요할 때 복원하는 것이 좋습니다.
이 튜토리얼에서는 지도의 상태를 저장하는 데 필요한 모든 코드를 제공합니다. 자세한 내용은 savedInstanceState 번들 가이드를 참고하세요.
지도 활동에서 활동 상태를 저장하기 위한 키 값을 설정합니다.
활동이 일시중지될 때 상태를 저장하도록 onSaveInstanceState() 콜백을 구현합니다.
활동의 onCreate() 메서드에서 기기의 위치와 지도의 카메라 위치(이전에 저장한 경우)를 가져옵니다.
축하합니다. Google 지도에 현재 장소를 표시하는 Android 앱을 빌드했습니다. Android용 Maps SDK, Android용 Places SDK, 통합 위치 정보 제공자를 사용하는 방법도 알아보았습니다.
의견 보내기