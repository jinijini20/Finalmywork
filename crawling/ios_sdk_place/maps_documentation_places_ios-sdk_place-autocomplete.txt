Source URL: https://developers.google.com/maps/documentation/places/ios-sdk/place-autocomplete?hl=ko

이 페이지는 Cloud Translation API를 통해 번역되었습니다.
Switch to English
홈
제품
Google Maps Platform
문서
iOS
Places SDK for iOS
도움이 되었나요?
의견 보내기
Place Autocomplete (신규)
bookmark_border
출시 노트
이 페이지의 내용
프로그래매틱 방식으로 장소 예측 가져오기
Autocomplete (신규) 요청
Autocomplete (신규) 응답
필수 매개변수
query
선택적 매개변수
sessionToken
선택적 AutocompleteFilter 매개변수
플랫폼 선택: Android iOS JavaScript 웹 서비스
유럽 경제 지역 (EEA) 개발자
Autocomplete (신규) 서비스는 요청에 대한 응답으로 장소 추천을 반환하는 iOS API입니다. 요청에서 텍스트 검색 문자열과 검색 영역을 제어하는 지리적 경계를 지정합니다.
Autocomplete (New) 서비스는 입력의 전체 단어 및 하위 문자열을 일치시켜 장소 이름, 주소, Plus Code를 결정할 수 있습니다. 따라서 사용자가 입력할 때 애플리케이션에서 쿼리를 전송하여 즉시 장소 추천을 제공할 수 있습니다.
장소 추천은 지정된 입력 텍스트 문자열과 검색 영역을 기반으로 한 장소(예: 비즈니스, 주소, 관심 장소)입니다.
예를 들어 검색 영역이 뉴욕시로 제한된 상태에서 부분 사용자 입력 'Spagh'가 포함된 문자열을 입력으로 사용하여 API를 호출합니다. 그러면 응답에 검색 문자열 및 검색 영역과 일치하는 장소 추천 목록(예: '카페 스파게티'라는 레스토랑)과 장소에 관한 세부정보가 포함됩니다.
반환된 장소 추천은 사용자가 원하는 장소를 선택할 수 있도록 사용자에게 표시되도록 설계되었습니다. 장소 세부정보(신규) 요청을 하여 반환된 장소 추천에 대한 자세한 정보를 확인할 수 있습니다.
다음 두 가지 주요 방법으로 Autocomplete (New) 기능을 앱에 통합할 수 있습니다.
프로그래매틱 방식으로 장소 예측 가져오기: API를 직접 호출하여 예측을 가져오고 맞춤 사용자 인터페이스에 표시합니다.
장소 자동 완성 위젯 추가: 사용자가 입력할 때 예상 검색어를 표시하는 즉시 사용 가능한 검색 자동 완성 환경을 제공합니다.
참고: 자동 완성(신규) 위젯은 iOS용 Places Swift SDK 버전 10.0.0 이상에서만 사용할 수 있습니다. 자세한 내용은 iOS용 Places Swift를 참고하세요.
프로그래매틱 방식으로 장소 예측 가져오기
Autocomplete (신규) 요청
GMSPlacesClient에서 메서드를 호출하여 자동 완성 요청을 만듭니다. GMSAutocompleteRequest 객체에 매개변수를 전달할 수 있습니다. 이 응답은 GMSAutocompletePlaceSuggestion 객체 내에 자동 완성 추천을 제공합니다.
API 키와 query 매개변수는 필수입니다. GMSAutocompleteSessionToken를 포함하여 요청을 결제 세션과 연결하고 GMSAutocompleteFilter를 포함하여 결과에 적용할 수도 있습니다.
Places Swift SDK 버전
필수 매개변수 및 선택적 매개변수에 대한 자세한 내용은 이 문서의 매개변수 섹션을 참고하세요.
--- 탭: Places Swift SDK ---
let center = (37.3913916, -122.0879074)
let northEast = (37.388162, -122.088137)
let southWest = (37.395804, -122.077023)

let bias = RectangularCoordinateRegion(northEast: northEast, southWest: southWest)
let filter = AutocompleteFilter(types: [ .restaurant ], origin: center, coordinateRegionBias: bias)

let autocompleteRequest = AutocompleteRequest(query: "Sicilian piz", filter: filter)
switch await placesClient.fetchAutocompleteSuggestions(with: autocompleteRequest) {
case .success(let autocompleteSuggestions):
  // Handle suggestions.
case .failure(let placesError):
  // Handle error.
}

--- 탭: Swift ---
let token = GMSAutocompleteSessionToken()

let northWestBounds = CLLocationCoordinate2DMake(40.921628, -73.700051)
let southEastBounds = CLLocationCoordinate2DMake(40.477398, -74.259087)

let filter = GMSAutocompleteFilter()
filter.types = [kGMSPlaceTypeRestaurant]
filter.locationBias = GMSPlaceRectangularLocationOption(northWestBounds, southEastBounds)

let request = GMSAutocompleteRequest(query:"Spagh")
request.filter = filter
request.sessionToken = token

GMSPlacesClient.shared().fetchAutocompleteSuggestions(from: request, callback: { ( results, error ) in
      if let error = error {
        print("Autocomplete error: \(error)")
        return
      }
      if let autocompleteResults = results {
        for result in autocompleteResults {
          print("Result \(String(describing: result.placeSuggestion?.placeID)) with \(String(describing: result.placeSuggestion?.attributedFullText))")
        }
      }
    })

--- 탭: Objective-C ---
CLLocationCoordinate2D northEast = CLLocationCoordinate2DMake(37.388162, -122.088137);
CLLocationCoordinate2D southWest = CLLocationCoordinate2DMake(37.395804, -122.077023);

GMSAutocompleteFilter *filter = [[GMSAutocompleteFilter alloc] init];
filter.types = @[ kGMSPlaceTypeRestaurant ];
filter.locationBias = GMSPlaceRectangularLocationOption(northEast, southWest);
GMSAutocompleteRequest *request = [[GMSAutocompleteRequest alloc] initWithQuery:@"Sicilian piz"];
request.sessionToken = token;
request.filter = filter;

[[GMSPlacesClient sharedClient] fetchAutocompleteSuggestionsFromRequest:request callback:^(NSArray<GMSAutocompleteSuggestion *> * results, NSError * error){
  // Handle response
  for (GMSAutocompleteSuggestion *suggestion in results) {
    if (suggestion.placeSuggestion) {
      // Show place suggestion data.
    }
  }
}];
Autocomplete (신규) 응답
자동 완성은 최대 5개의 GMSAutocompleteSuggestion 인스턴스 배열을 반환합니다. 배열에는 다음이 포함됩니다.
placeID
types: 이 장소에 적용되는 유형입니다.
distanceMeters: 원점으로부터의 거리입니다.
attributedFullText: 제안의 사람이 읽을 수 있는 전체 텍스트입니다.
attributedPrimaryText: 제안의 사람이 읽을 수 있는 기본 텍스트입니다.
attributedSecondaryText: 제안의 사람이 읽을 수 있는 보조 텍스트입니다.
structuredFormat: 구체적인 이름과 명확하게 하기 위한 텍스트(예: 도시 또는 지역)입니다.
필수 매개변수
query
검색할 텍스트 문자열입니다. 전체 단어 및 하위 문자열, 장소 이름, 주소, Plus Code를 지정합니다. Autocomplete (New) 서비스는 이 문자열을 기반으로 일치 가능성이 있는 항목을 반환하고 감지된 관련성을 기반으로 검색 결과를 정렬합니다.
선택적 매개변수
sessionToken
세션 토큰은 자동 완성(신규) 호출(위젯을 통해 이루어진 호출과 프로그래매틱 호출 모두)을 '세션'으로 추적하는 사용자 생성 문자열입니다. 자동 완성 (신규)은 세션 토큰을 사용하여 사용자 자동 완성 검색의 쿼리 및 선택 단계를 결제 목적의 개별 세션으로 그룹화합니다. 자세한 내용은 세션 토큰을 참고하세요.
선택적 AutocompleteFilter 매개변수
유형
장소에는 표 A 또는 표 B 유형 중 단일 기본 유형만 연결할 수 있습니다. 예를 들어 기본 유형은 mexican_restaurant 또는 steak_house일 수 있습니다.
기본적으로 API는 장소와 연결된 기본 유형 값과 관계없이 input 매개변수를 기반으로 모든 장소를 반환합니다. types 매개변수를 전달하여 결과를 특정 기본 유형 또는 기본 유형으로 제한합니다.
이 매개변수를 사용하여 표 A 또는 표 B의 유형 값을 최대 5개까지 지정합니다. 장소가 응답에 포함되려면 지정된 기본 유형 값 중 하나와 일치해야 합니다.
다음과 같은 경우 요청이 INVALID_REQUEST 오류로 거부됩니다.
6개 이상의 유형이 지정되었습니다.
인식할 수 없는 유형이 지정됩니다.
예를 들어 결과를 스포츠용품 매장으로 제한하려면 AutocompleteFilter에서 해당 유형을 지정합니다.
--- 탭: Places Swift SDK ---
let filter = AutocompleteFilter(types: [ PlaceType(rawValue: "sporting_goods_store") ])

--- 탭: Swift ---
let filter = GMSAutocompleteFilter()
filter.types = ["sporting_goods_store"]

--- 탭: Objective-C ---
GMSAutocompleteFilter *filter = [[GMSAutocompleteFilter alloc] init];
filter.types = @[ "sporting_goods_store" ];
국가
최대 15개의 ccTLD ('최상위 도메인') 2자리 값 배열로 지정된 지정된 지역 목록의 결과만 포함합니다. 생략하면 응답에 제한이 적용되지 않습니다. 예를 들어 리전을 독일과 프랑스로 제한하려면 다음을 실행합니다.
--- 탭: Places Swift SDK ---
let filter = AutocompleteFilter(countries: ["DE", "FR"])

--- 탭: Swift ---
let filter = GMSAutocompleteFilter()
filter.countries = ["DE", "FR"]

--- 탭: Objective-C ---
GMSAutocompleteFilter *filter = [[GMSAutocompleteFilter alloc] init];
filter.countries = @[ @"DE", @"FR" ];
locationRestriction와 countries을 모두 지정하면 결과가 두 설정의 교차 영역에 표시됩니다.
inputOffset
input의 커서 위치를 나타내는 0부터 시작하는 유니코드 문자 오프셋입니다. 커서 위치에 따라 반환되는 예측이 달라질 수 있습니다. 비어 있으면 기본값은 input의 길이입니다.
locationBias 또는 locationRestriction
locationBias 또는 locationRestriction 중 하나를 지정하여 검색 영역을 정의할 수 있지만 둘 다 지정할 수는 없습니다. locationRestriction는 결과가 있어야 하는 지역을 지정하고 locationBias는 결과가 있어야 하는 지역 근처에 있지만 해당 지역 외부에 있을 수 있는 지역을 지정한다고 생각하면 됩니다.
참고: locationBias와 locationRestriction을 모두 생략하면 API는 기본적으로 IP 바이어싱을 사용합니다. IP 바이어싱을 사용하면 API가 기기의 IP 주소를 사용하여 결과를 바이어스합니다.
locationBias는 검색할 영역을 지정합니다. 이 위치는 편향으로 작용하므로 지정된 영역 외부의 결과를 포함하여 지정된 위치 주변의 결과가 반환될 수 있습니다.
locationRestriction는 검색할 영역을 지정합니다. 지정된 영역 외부의 결과는 반환되지 않습니다.
locationBias 또는 locationRestriction 영역을 직사각형 뷰포트 또는 원으로 지정합니다.
원은 중심점과 반지름(미터)으로 정의됩니다. 반지름은 0.0 이상 50000.0 이하여야 합니다. 기본값은 0.0입니다. locationRestriction의 경우 반경을 0.0보다 큰 값으로 설정해야 합니다. 그렇지 않으면 요청에서 결과를 반환하지 않습니다.
예를 들면 다음과 같습니다.
--- 탭: Places Swift SDK ---
let center = CLLocationCoordinate2DMake(40.477398, -74.259087)

let bias = CircularCoordinateRegion(center: center, radius: 1000.0)

let filter = AutocompleteFilter(coordinateRegionBias: bias)

--- 탭: Swift ---
let center = CLLocationCoordinate2DMake(40.730610, -73.935242)
let radius = 1000.0

filter.locationBias = GMSPlaceCircularLocationOption(center, radius)

--- 탭: Objective-C ---
CLLocationCoordinate2D center = CLLocationCoordinate2DMake(40.730610, -73.935242);
radius = 1000.0;

GMSAutocompleteFilter *filter = [[GMSAutocompleteFilter alloc] init];
filter.locationBias = GMSPlaceCircularLocationOption(center, radius);
사각형은 대각선으로 반대되는 두 개의 low 및 high 포인트로 표현되는 위도-경도 표시 영역입니다. 표시 영역은 닫힌 영역으로 간주되므로 경계가 포함됩니다. 위도 범위는 -90~90도(포함)여야 하고 경도 범위는 -180~180도(포함)여야 합니다.
low = high이면 표시 영역은 해당 단일 점으로 구성됩니다.
low.longitude > high.longitude이면 경도 범위가 반전됩니다 (뷰포트가 180도 경도선을 교차함).
low.longitude = -180도이고 high.longitude= 180도인 경우 뷰포트에 모든 경도가 포함됩니다.
low.longitude = 180도이고 high.longitude = -180도이면 경도 범위가 비어 있습니다.
low와 high 모두 채워져야 하며, 표현된 상자는 비어 있을 수 없습니다. 빈 뷰포트는 오류를 발생시킵니다.
예를 들어 다음 뷰포트는 뉴욕시를 완전히 둘러쌉니다.
--- 탭: Places Swift SDK ---
let northEast = CLLocationCoordinate2DMake(40.477398, -74.259087)
let southWest = CLLocationCoordinate2DMake(40.921628, -73.700051)

let filter = AutocompleteFilter(coordinateRegionBias: bias)

--- 탭: Swift ---
let high = CLLocationCoordinate2DMake(40.921628, -73.700051)
let low = CLLocationCoordinate2DMake(40.477398, -74.259087)

let filter = GMSAutocompleteFilter()
filter.locationBias = GMSPlaceRectangularLocationOption(high, low)

--- 탭: Objective-C ---
CLLocationCoordinate2D high = CLLocationCoordinate2DMake(40.477398, -74.259087);
CLLocationCoordinate2D low = CLLocationCoordinate2DMake(440.921628, -73.700051);

GMSAutocompleteFilter *filter = [[GMSAutocompleteFilter alloc] init];
filter.locationBias = GMSPlaceRectangularLocationOption(high, low);
origin
목적지까지의 직선 거리를 계산할 원점입니다 (distanceMeters로 반환됨). 이 값을 생략하면 직선 거리가 반환되지 않습니다. 위도 및 경도 좌표로 지정해야 합니다.
--- 탭: Places Swift SDK ---
let filter = AutocompleteFilter(origin: CLLocation(latitude: 37.395804, longitude: -122.077023))

--- 탭: Swift ---
let filter = GMSAutocompleteFilter()
filter.origin =  CLLocation(latitude: 37.395804, longitude: -122.077023)

--- 탭: Objective-C ---
GMSAutocompleteFilter *filter = [[GMSAutocompleteFilter alloc] init];

filter.origin = [[CLLocation alloc] initWithLatitude:37.395804 longitude: -122.077023];
regionCode
대답의 형식을 지정하는 데 사용되는 지역 코드입니다. ccTLD ('최상위 도메인') 2자리 값으로 지정됩니다. 대부분의 ccTLD 코드는 ISO 3166-1 코드와 동일하지만 일부 주목할 만한 예외가 있습니다. 예를 들어 영국의 ccTLD는 'uk'(.co.uk)이지만 ISO 3166-1 코드는 'gb'입니다('그레이트브리튼 북아일랜드 연합왕국'의 법인에 해당).
잘못된 지역 코드를 지정하면 API에서 INVALID_ARGUMENT 오류를 반환합니다. 이 매개변수는 관련 법규에 따라 결과에 영향을 미칠 수 있습니다.
shouldIncludePureServiceAreaBusinesses
true인 경우 응답 배열에 순수 서비스 지역 비즈니스를 반환합니다. 순수 방문 서비스 업체는 고객에게 방문 또는 배달 서비스를 제공하지만 비즈니스 주소지에서는 고객에게 서비스를 제공하지 않는 비즈니스입니다.
예를 들면 다음과 같습니다.
--- 탭: Places Swift SDK ---
let filter = AutocompleteFilter()
filter.shouldIncludePureServiceAreaBusinesses = true

--- 탭: Swift ---
let filter = AutocompleteFilter()
filter.shouldIncludePureServiceAreaBusinesses = true

--- 탭: Objective-C ---
GMSAutocompleteFilter *filter = [[GMSAutocompleteFilter alloc] init];
filter.shouldIncludePureServiceAreaBusinesses = YES;
Place Autocomplete 위젯 추가
일관된 장소 자동 완성 환경을 더 쉽게 제공하려면 앱에 Place Autocomplete 위젯을 추가하면 됩니다. 이 위젯은 사용자 입력을 처리하고 사용자에게 장소 예측을 표시하는 전용 전체 화면 인터페이스를 제공하는 동시에 앱에 AutocompletePlaceSuggestion 객체를 반환합니다. 그런 다음 Place Details(New) 요청을 통해 장소 예측에 관한 추가 정보를 가져올 수 있습니다.
참고: 자동 완성(신규) 위젯은 iOS용 Places Swift SDK 버전 10.0.0 이상에서만 사용할 수 있습니다. 자세한 내용은 iOS용 Places Swift를 참고하세요.
프로그래매틱 방식으로 장소 예상 검색어를 가져오는 경우와 마찬가지로 Place Autocomplete 위젯을 사용하면 세션 토큰을 사용하여 결제 목적으로 자동 완성 요청을 세션으로 그룹화할 수 있습니다. AutocompleteSessionToken()를 호출하여 세션 토큰을 전달할 수 있습니다.
세션 토큰을 제공하지 않으면 위젯에서 자동 완성 세션 토큰을 생성하며, 이 토큰은 onSelection 콜백에서 가져올 수 있습니다. 세션 토큰 사용에 관한 자세한 내용은 세션 토큰 정보를 참고하세요.
참고: 세션 토큰 사용은 선택사항이지만 권장됩니다.
show 바인딩 값이 true로 설정되면 사용자는 장소를 선택할 수 있는 전체 화면 뷰로 이동합니다. 사용자가 입력하면 위젯은 비즈니스, 주소, 관심 장소와 같은 장소에 대한 제안을 반환합니다. 사용자가 장소를 선택하면 위젯은 선택한 장소와 함께 onSelection 핸들러를 호출하고 전체 화면 뷰를 닫습니다.
Place Autocomplete 위젯 매개변수
프로그래매틱 방식으로 사용할 수 있는 매개변수 외에도 장소 자동 완성 위젯은 다음 매개변수를 제공합니다.
표시
show은 위젯이 표시되는지 여부를 지정합니다.
AutocompleteUICustomization
AutocompleteUICustomization 매개변수는 위젯에 적용할 UI 맞춤설정을 지정합니다. 맞춤설정 옵션은 다음과 같습니다.
AutocompleteListDensity. 이 매개변수를 사용하면 추천 목록의 밀도를 multiLine 또는 twoLine로 선택할 수 있습니다.
AutocompleteUIIcon. 이 매개변수를 사용하면 각 목록 항목의 기본 아이콘을 표시할지 여부를 선택할 수 있습니다.
onSelection
장소를 선택할 때 실행할 클로저입니다.
onError
오류가 발생할 때 실행할 클로저입니다. 오류가 발생하면 PlacesError이 전달됩니다.
전체 코드 예시 보기
Autocomplete (신규) 예
locationRestriction 및 locationBias 사용
자동 완성 (신규)은 기본적으로 IP 바이어스를 사용하여 검색 영역을 제어합니다. IP 바이어싱을 사용하면 API가 기기의 IP 주소를 사용하여 결과를 바이어스합니다. 선택적으로 locationRestriction 또는 locationBias를 사용하여 검색할 영역을 지정할 수 있지만 둘 다 사용할 수는 없습니다.
위치 제한은 검색할 영역을 지정합니다. 지정된 영역 밖의 결과는 반환되지 않습니다. 다음 예에서는 위치 제한을 사용하여 요청을 샌프란시스코를 중심으로 하는 반지름 5,000미터의 원형 위치 제한으로 제한합니다.
--- 탭: Places Swift SDK ---
let center = (37.775061, -122.419400)
let radius = 5000.0
let restriction = CircularCoordinateRegion(center: center, radius: radius)
let filter = AutocompleteFilter(coordinateRegionRestriction: restriction)
let token = AutocompleteSessionToken()

let autocompleteRequest = AutocompleteRequest(query: "Sicilian piz", sessionToken: token, filter: filter)
switch await placesClient.fetchAutocompleteSuggestions(with: autocompleteRequest) {
case .success(let autocompleteSuggestions):
  for suggestion in autocompleteSuggestions {
    switch suggestion {
    case .place:
      // Show place suggestion data.
    }
  }
case .failure(let placesError):
  // Handle error.
}

--- 탭: Swift ---
let token = GMSAutocompleteSessionToken()

let center = CLLocationCoordinate2DMake(37.775061, -122.419400)
let radius = 5000.0

let filter = GMSAutocompleteFilter()
filter.locationRestriction = GMSPlaceCircularLocationOption(center, radius)

let request = GMSAutocompleteRequest(query:"Piz")
request.filter = filter
request.sessionToken = token

GMSPlacesClient.shared().fetchAutocompleteSuggestions(from: request, callback: { ( results, error ) in
      if let error = error {
        print("Autocomplete error: \(error)")
        return
      }
      if let autocompleteResults = results {
        for result in autocompleteResults {
          print("Result \(String(describing: result.placeSuggestion?.placeID)) with \(String(describing: result.placeSuggestion?.attributedFullText))")
        }
      }
    })

--- 탭: Objective-C ---
CLLocationCoordinate2D center = CLLocationCoordinate2DMake(37.775061, -122.419400);
radius = 5000.0;

GMSAutocompleteFilter *filter = [[GMSAutocompleteFilter alloc] init];
filter.locationRestriction = GMSPlaceCircularLocationOption(center, radius);
GMSAutocompleteRequest *request = [[GMSAutocompleteRequest alloc] initWithQuery:@"Sicilian piz"];
request.sessionToken = token;
request.filter = filter;

[[GMSPlacesClient sharedClient] fetchAutocompleteSuggestionsFromRequest:request callback:^(NSArray<GMSAutocompleteSuggestion *> * results, NSError * error){
  // Handle response
  for (GMSAutocompleteSuggestion *suggestion in results) {
    if (suggestion.placeSuggestion) {
      // Show place suggestion data.
    }
  }
}];
위치 편향을 사용하면 위치가 편향으로 작용하므로 지정된 지역 외부의 결과를 포함하여 지정된 위치 주변의 결과가 반환될 수 있습니다. 다음 예에서는 위치 편향을 사용하도록 이전 요청을 변경합니다.
--- 탭: Places Swift SDK ---
let center = (37.775061, -122.419400)
let radius = 5000.0
let bias = CircularCoordinateRegion(center: center, radius: radius)
let filter = AutocompleteFilter(coordinateRegionBias: bias)
let token = AutocompleteSessionToken()

let autocompleteRequest = AutocompleteRequest(query: "Sicilian piz", sessionToken: token, filter: filter)
switch await placesClient.fetchAutocompleteSuggestions(with: autocompleteRequest) {
case .success(let autocompleteSuggestions):
  for suggestion in autocompleteSuggestions {
    switch suggestion {
    case .place:
      // Show place suggestion data.
    }
  }
case .failure(let placesError):
  // Handle error.
}

--- 탭: Swift ---
let token = GMSAutocompleteSessionToken()

let center = CLLocationCoordinate2DMake(37.775061, -122.419400)
let radius = 5000.0

let filter = GMSAutocompleteFilter()
filter.locationBias = GMSPlaceCircularLocationOption(center, radius)

let request = GMSAutocompleteRequest(query:"Piz")
request.filter = filter
request.sessionToken = token

GMSPlacesClient.shared().fetchAutocompleteSuggestions(from: request, callback: { ( results, error ) in
      if let error = error {
        print("Autocomplete error: \(error)")
        return
      }
      if let autocompleteResults = results {
        for result in autocompleteResults {
          print("Result \(String(describing: result.placeSuggestion?.placeID)) with \(String(describing: result.placeSuggestion?.attributedFullText))")
        }
      }
    })

--- 탭: Objective-C ---
CLLocationCoordinate2D center = CLLocationCoordinate2DMake(37.775061, -122.419400);
radius = 5000.0;

GMSAutocompleteFilter *filter = [[GMSAutocompleteFilter alloc] init];
filter.locationBias = GMSPlaceCircularLocationOption(center, radius);
GMSAutocompleteRequest *request = [[GMSAutocompleteRequest alloc] initWithQuery:@"Sicilian piz"];
request.sessionToken = token;
request.filter = filter;

[[GMSPlacesClient sharedClient] fetchAutocompleteSuggestionsFromRequest:request callback:^(NSArray<GMSAutocompleteSuggestion *> * results, NSError * error){
  // Handle response
  for (GMSAutocompleteSuggestion *suggestion in results) {
    if (suggestion.placeSuggestion) {
      // Show place suggestion data.
    }
  }
}];
사용 유형
표 A 및 표 B에 나열된 특정 유형의 요청 결과를 제한하려면 types 매개변수를 사용하세요. 최대 5개의 값으로 구성된 배열을 지정할 수 있습니다. 생략하면 모든 유형이 반환됩니다.
다음 예에서는 'Soccer'라는 쿼리 문자열을 지정하고 유형 매개변수를 사용하여 결과를 "sporting_goods_store" 유형의 시설로 제한합니다.
--- 탭: Places Swift SDK ---
let filter = AutocompleteFilter(types: [ PlaceType(rawValue: "sporting_goods_store") ])
let token = AutocompleteSessionToken()

let autocompleteRequest = AutocompleteRequest(query: "Soccer", sessionToken: token, filter: filter)
switch await placesClient.fetchAutocompleteSuggestions(with: autocompleteRequest) {
case .success(let autocompleteSuggestions):
  for suggestion in autocompleteSuggestions {
    switch suggestion {
    case .place:
      // Show place suggestion data.
    }
  }
case .failure(let placesError):
  // Handle error.
}

--- 탭: Swift ---
let token = GMSAutocompleteSessionToken()

let filter = GMSAutocompleteFilter()
filter.types = ["sporting_goods_store"]

let request = GMSAutocompleteRequest(query:"Soccer")
request.filter = filter
request.sessionToken = token

GMSPlacesClient.shared().fetchAutocompleteSuggestions(from: request, callback: { ( results, error ) in
      if let error = error {
        print("Autocomplete error: \(error)")
        return
      }
      if let autocompleteResults = results {
        for result in autocompleteResults {
          print("Result \(String(describing: result.placeSuggestion?.placeID)) with \(String(describing: result.placeSuggestion?.attributedFullText))")
        }
      }
    })

--- 탭: Objective-C ---
GMSAutocompleteFilter *filter = [[GMSAutocompleteFilter alloc] init];
filter.types = @[ "sporting_goods_store" ];
GMSAutocompleteRequest *request = [[GMSAutocompleteRequest alloc] initWithQuery:@"Soccer"];
request.sessionToken = token;
request.filter = filter;

[[GMSPlacesClient sharedClient] fetchAutocompleteSuggestionsFromRequest:request callback:^(NSArray<GMSAutocompleteSuggestion *> * results, NSError * error){
  // Handle response
  for (GMSAutocompleteSuggestion *suggestion in results) {
    if (suggestion.placeSuggestion) {
      // Show place suggestion data.
    }
  }
}];
출처 사용
요청에 origin 매개변수를 위도 및 경도 좌표로 지정하여 포함하면 API는 응답에 출발지에서 목적지까지의 직선 거리를 포함합니다. 응답은 거리를 distanceMeters로 반환합니다.
이 예에서는 원점을 샌프란시스코의 중심으로 설정합니다.
--- 탭: Places Swift SDK ---
let filter = AutocompleteFilter(origin: CLLocation(latitude: 37.7749, longitude: -122.4194))
let token = AutocompleteSessionToken()

let autocompleteRequest = AutocompleteRequest(query: "Amoeba", sessionToken: token, filter: filter)
switch await placesClient.fetchAutocompleteSuggestions(with: autocompleteRequest) {
case .success(let autocompleteSuggestions):
  for suggestion in autocompleteSuggestions {
    switch suggestion {
    case .place:
      // Show place suggestion data.
    }
  }
case .failure(let placesError):
  // Handle error.
}

--- 탭: Swift ---
let token = GMSAutocompleteSessionToken()

let origin = CLLocation(latitude: 37.7749, longitude: -122.4194)

let filter = GMSAutocompleteFilter()

filter.origin =  origin

let request = GMSAutocompleteRequest(query:"Amoeba")
request.filter = filter
request.sessionToken = token

GMSPlacesClient.shared().fetchAutocompleteSuggestions(from: request, callback: { ( results, error ) in
      if let error = error {
        print("Autocomplete error: \(error)")
        return
      }
      if let autocompleteResults = results {
        for result in autocompleteResults {
          print("Result \(String(describing: result.placeSuggestion?.placeID)) with \(String(describing: result.placeSuggestion?.attributedFullText)) and distance: \(String(describing: result.placeSuggestion?.distanceMeters))")
        }
      }
    })

--- 탭: Objective-C ---
GMSAutocompleteFilter *filter = [[GMSAutocompleteFilter alloc] init];
filter.origin = [[CLLocation alloc] initWithLatitude:37.395804 longitude:-122.077023];
GMSAutocompleteRequest *request = [[GMSAutocompleteRequest alloc] initWithQuery:@"Amoeba"];
request.sessionToken = token;
request.filter = filter;

[[GMSPlacesClient sharedClient] fetchAutocompleteSuggestionsFromRequest:request callback:^(NSArray<GMSAutocompleteSuggestion *> * results, NSError * error){
  // Handle response
  for (GMSAutocompleteSuggestion *suggestion in results) {
    if (suggestion.placeSuggestion) {
      // Show place suggestion data.
      }
    }
}];
Places Autocomplete 위젯 추가
--- 탭: Places Swift SDK ---
struct PlaceAutocompleteDemoView: View {

  @State private var fetchedPlace: Place?
  @State private var placesError: PlacesError?
  @State private var showWidget = false

  public var body: some View {
    VStack {
      Button("Search for a place") {
        showWidget.toggle()
      }
      .placeAutocomplete(
        show: $showWidget,
        onSelection: { (autocompletePlaceSuggestion, autocompleteSessionToken) in
          Task {
            let placesClient = await PlacesClient.shared
            let fetchPlaceRequest = FetchPlaceRequest(
              placeID: autocompletePlaceSuggestion.placeID,
              placeProperties: [.displayName, .formattedAddress],
              sessionToken: autocompleteSessionToken
            )

            switch await placesClient.fetchPlace(with: fetchPlaceRequest) {
            case .success(let place):
              print("Fetched place: \(place)")
              self.fetchedPlace = place
            case .failure(let placesError):
              print("Failed to fetch place: \(placesError)")
              self.placesError = placesError
            }
          }
        },
        onError: { placesError in
          self.placesError = placesError
        }
      )
    }
  }
}
도움이 되었나요?
의견 보내기