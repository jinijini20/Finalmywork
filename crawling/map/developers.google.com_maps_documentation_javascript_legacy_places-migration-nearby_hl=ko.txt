Source URL: https://developers.google.com/maps/documentation/javascript/legacy/places-migration-nearby?hl=ko
Title: 새 Nearby Search로 이전

의견 보내기

새 Nearby Search로 이전

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

유럽 경제 지역 (EEA) 개발자

청구서 수신 주소가 유럽 경제 지역에 있는 경우 2025년 7월 8일부터
Google Maps Platform EEA 서비스 약관 [https://cloud.google.com/terms/maps-platform/eea?hl=ko]
이 서비스 이용에 적용됩니다. 기능은 리전에 따라 다릅니다.
자세히 알아보기 [https://developers.google.com/maps/comms/eea/faq?hl=ko]

이 페이지에서는 Place [https://developers.google.com/maps/documentation/javascript/reference/place?hl=ko] 클래스 (신규)와 PlacesService [https://developers.google.com/maps/documentation/javascript/reference/places-service?hl=ko](기존)에 사용되는 주변 검색의 차이점을 설명하고 비교를 위한 코드 스니펫을 제공합니다.

기존 PlacesService에는 nearbySearch() 메서드가 있어 지정된 영역 내에서 키워드나 유형으로 장소를 검색할 수 있습니다.
Place 클래스에는 searchNearby() 메서드가 있어 장소 데이터 필드와 장소 유형의 선택을 확장하여 유연성을 높임으로써 장소 유형별로 지정된 지역 내에서 장소를 검색할 수 있습니다.

다음 표에는 Place 클래스와 PlacesService 간의 근처 검색 메서드의 주요 차이점이 나와 있습니다.

| PlacesService (기존) | Place (신규) |
| --- | --- |
| nearbySearch() | searchNearby() |
| PlaceSearchRequest | SearchNearbyRequest |
| 결과 객체와 google.maps.places.PlacesServiceStatus 응답을 처리하기 위해 콜백을 사용해야 합니다. | Promise를 사용하며 비동기식으로 작동합니다. |
| PlacesServiceStatus 확인이 필요합니다. | 필수 상태 확인이 없으며 표준 오류 처리를 사용할 수 있습니다. 자세히 알아보기 |
| 위치 편향만 지원합니다. | 위치 편향 및 위치 제한을 지원합니다. |
| 사용 가능한 모든 데이터 필드 (지원되는 필드의 하위 집합)를 반환합니다. 특정 필드로 제한할 수 없습니다. | 요청된 장소 데이터 필드만 반환합니다. Place 클래스는 확장되고 정기적으로 업데이트되는 필드 선택을 제공합니다. |
| 고정된 장소 유형으로 제한됩니다. | 확장되고 정기적으로 업데이트되는 장소 유형을 이용할 수 있습니다. |
| 키워드를 사용한 텍스트 기반 검색을 지원합니다. | 텍스트 기반 검색은 지원되지 않습니다. 대신 텍스트 검색 (신규)을 사용하세요. |

코드 비교

이 섹션에서는 인근 검색 메서드의 코드를 비교하여 Places 서비스와 Place 클래스의 차이점을 설명합니다. 코드 스니펫은 텍스트 기반 검색 요청을 수행하기 위해 각 API에 필요한 코드를 보여줍니다.

Nearby Search (기존)

기존 주변 검색을 사용하면 지정된 영역 내에서 키워드나 유형으로 장소를 검색할 수 있습니다. 장소 데이터 필드를 사용하여 검색을 제한할 수 있는 방법은 없으므로 사용 가능한 모든 필드가 각 요청과 함께 반환됩니다.
다음 스니펫은 nearbySearch()를 호출하여 오스트레일리아 시드니의 레스토랑에 관한 정보를 반환하는 방법을 보여줍니다. 요청은 동기식이며 콜백을 사용하고 PlacesServiceStatus에 대한 필수 조건부 검사를 포함합니다.
service.nearbySearch(request, callback);

position: place.geometry.location,
PlacesService의 상태를 확인할 필요가 없습니다. 대신 표준 오류 처리를 사용할 수 있습니다.

다음 코드 스니펫은 레스토랑에 대한 Nearby Search 요청을 만드는 함수를 보여줍니다. 이 예에서는 rankPreference 옵션을 사용하여 인기도에 따라 검색 결과를 순위 지정하는 방법을 보여줍니다 (이전 버전에서는 rankBy 옵션을 사용하여 순위를 지정함). searchNearby() 메서드는 await 연산자를 사용하므로 async 함수 내에서만 사용할 수 있습니다.
async function nearbySearch() {

if (places.length) {
position: place.location,