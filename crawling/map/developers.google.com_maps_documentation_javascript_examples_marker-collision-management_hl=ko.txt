Source URL: https://developers.google.com/maps/documentation/javascript/examples/marker-collision-management?hl=ko
Title: Marker Collision Management

Send feedback

Marker Collision Management

Stay organized with collections

Save and categorize content based on your preferences.

Handle marker collisions

Collision behavior controls how a marker will display if it collides (overlaps)
with another marker. Collision behavior is only supported when using
Advanced Markers [https://developers.google.com/maps/documentation/javascript/advanced-markers] on a vector
map.

To set collision behavior, set AdvancedMarkerView.collisionBehavior to one of
the following:

REQUIRED: (default) Always display the marker regardless of collision.
OPTIONAL_AND_HIDES_LOWER_PRIORITY Display the marker only if it does not
overlap with other markers. If two markers of this type would overlap, the one
with the higher zIndex is shown. If they have the same zIndex, the one with
the lower vertical screen position is shown.
REQUIRED_AND_HIDES_OPTIONAL Always display the marker regardless of
collision, and hide any OPTIONAL_AND_HIDES_LOWER_PRIORITY markers or labels
that would overlap with the marker.

Note: On raster maps, only marker-to-marker collisions are detected. Marker
collisions with basemap labels are supported only on vector maps.
The following example always displays markers and hides underlying labels:
collisionBehavior: google.maps.CollisionBehavior.REQUIRED_AND_HIDES_OPTIONAL,
The following example hides markers if they collide with a required marker and
hides underlying labels:
collisionBehavior: google.maps.CollisionBehavior.OPTIONAL_AND_HIDES_LOWER_PRIORITY,
const { AdvancedMarkerElement } = await google.maps.importLibrary("marker") as google.maps.MarkerLibrary;

select.listen("MDCSelect:change", () => {
collisionBehavior = select.value;
markers.forEach((marker) => {
marker.collisionBehavior = collisionBehavior;

locations.forEach(([lng, lat]: number[]) => {
collisionBehavior: collisionBehavior,
const { AdvancedMarkerElement } = await google.maps.importLibrary("marker");
markers.forEach((marker) => {
marker.collisionBehavior = collisionBehavior;
locations.forEach(([lng, lat]) => {
collisionBehavior: collisionBehavior,
:root {
body {
<html>
<head>
<title>Advanced Marker Collision Management</title>

<link
href="https://unpkg.com/material-components-web@6.0.0/dist/material-components-web.css"
rel="stylesheet"
/>
<script src="https://unpkg.com/material-components-web@6.0.0/dist/material-components-web.min.js"></script>
<link
rel="stylesheet"
href="https://fonts.googleapis.com/icon?family=Material+Icons"
/>

<link rel="stylesheet" type="text/css" href="./style.css" />
<script type="module" src="./index.js"></script>
</head>
<body>
<div id="container">
<div id="map"></div>
<div id="sidebar">
<div class="mdc-select mdc-select--outlined">
<div
class="mdc-select__anchor"
aria-labelledby="outlined-select-label"
>
<input
type="text"
disabled
readonly
id="demo-selected-text"
class="mdc-select__selected-text"
/>
<i class="mdc-select__dropdown-icon"></i>
<span class="mdc-notched-outline">
<span class="mdc-notched-outline__leading"></span>
<span class="mdc-notched-outline__notch">
<span
id="outlined-select-label"
class="mdc-floating-label mdc-theme--primary"
>Pick a Collision Behavior</span
>
</span>
<span class="mdc-notched-outline__trailing"></span>
</span>
</div>
<div class="mdc-select__menu mdc-menu mdc-menu-surface">
<ul class="mdc-list">
<li class="mdc-list-item" data-value="REQUIRED">Required</li>
<li
class="mdc-list-item"
data-value="REQUIRED_AND_HIDES_OPTIONAL"
>
Required and hides optional
</li>
<li
class="mdc-list-item"
data-value="OPTIONAL_AND_HIDES_LOWER_PRIORITY"
>
Optional and hides lower priority
</li>
</ul>
</div>
</div>
</div>
</div>

<!-- prettier-ignore -->
<script>(g=>{var h,a,k,p="The Google Maps JavaScript API",c="google",l="importLibrary",q="__ib__",m=document,b=window;b=b[c]||(b[c]={});var d=b.maps||(b.maps={}),r=new Set,e=new URLSearchParams,u=()=>h||(h=new Promise(async(f,n)=>{await (a=m.createElement("script"));e.set("libraries",[...r]+"");for(k in g)e.set(k.replace(/[A-Z]/g,t=>"_"+t[0].toLowerCase()),g[k]);e.set("callback",c+".maps."+q);a.src=`https://maps.${c}apis.com/maps/api/js?`+e;d[q]=f;a.onerror=()=>h=n(Error(p+" could not load."));a.nonce=m.querySelector("script[nonce]")?.nonce||"";m.head.append(a)}));d[l]?console.warn(p+" only loads once. Ignoring:",g):d[l]=(f,...n)=>r.add(f)&&u().then(()=>d[l](f,...n))})
({key: "AIzaSyA6myHzS10YXdcazAFalmXvDkrYCp5cLc8", v: "weekly"});</script>
</body>
</html>index.html [https://github.com/googlemaps-samples/js-api-samples/blob/aa0b5b60136edb03c5eac5627cebe9ef42868db4/dist/samples/advanced-markers-collision/docs/index.html#L8-L79]

Try Sample

JSFiddle.net [https://jsfiddle.net/gh/get/library/pure/googlemaps-samples/js-api-samples/tree/main/dist/samples/advanced-markers-collision/jsfiddle]

Clone Sample

Git and Node.js are required to run this sample locally. Follow these instructions [https://docs.npmjs.com/downloading-and-installing-node-js-and-npm] to install Node.js and NPM. The following commands clone, install dependencies and start the sample application.

git clone https://github.com/googlemaps-samples/js-api-samples.git
cd samples/advanced-markers-collision
npm i
npm start

Send feedback