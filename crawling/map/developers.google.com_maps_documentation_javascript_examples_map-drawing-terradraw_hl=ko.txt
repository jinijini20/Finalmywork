Source URL: https://developers.google.com/maps/documentation/javascript/examples/map-drawing-terradraw?hl=ko
Title: Draw on a map using Terra Draw

Send feedback

Draw on a map using Terra Draw

Stay organized with collections

Save and categorize content based on your preferences.

The following example shows how to add a drawing layer to a map using Terra
Draw [https://github.com/JamesLMilner/terra-draw] JavaScript libraries. The
layer relies on OverlayView [https://developers.google.com/maps/documentation/javascript/reference/overlay-view#OverlayView]
and enables users to draw, edit, and select features like polygons, lines, and
points directly on the map interface.
All geometries created by the user are returned as standard GeoJSON [https://geojson.org/]
objects.

TypeScript
import { Loader } from '@googlemaps/js-api-loader';

import {
TerraDraw,
TerraDrawSelectMode,
TerraDrawPointMode,
TerraDrawLineStringMode,
TerraDrawPolygonMode,
TerraDrawRectangleMode,
TerraDrawCircleMode,
TerraDrawFreehandMode

newFeature.properties.mode = 'polygon';
draw.setMode('static');
const { LatLngBounds } = await google.maps.importLibrary("core") as google.maps.CoreLibrary;
const { Data } = await google.maps.importLibrary("maps") as google.maps.MapsLibrary;

map.addListener("click", () => {
if (draw) {

draw.on('ready', () => {
setupModeButtons();
draw.setMode('point');
currentMode = 'point';
setActiveButton('point-mode');

draw.on("select", (id) => {

draw.on("change", (ids, type) => {
if (isRestoring) {
return;
history.push(filteredSnapshot);
redoHistory = [];
link.download = "drawing.geojson";
link.click();
URL.revokeObjectURL(url);
resizeButton.classList.toggle('active', resizingEnabled);

draw.clear();
draw.addFeatures(snapshotToRestore);
setTimeout(() => { isRestoring = false; }, 0);
isRestoring = true;
draw.clear();
draw.addFeatures(snapshot);
setTimeout(() => { isRestoring = false; }, 0);
return newFeature;
y += point[1];
count++;
import { Loader } from '@googlemaps/js-api-loader';
import { TerraDraw, TerraDrawSelectMode, TerraDrawPointMode, TerraDrawLineStringMode, TerraDrawPolygonMode, TerraDrawRectangleMode, TerraDrawCircleMode, TerraDrawFreehandMode } from 'terra-draw';
import { TerraDrawGoogleMapsAdapter } from 'terra-draw-google-maps-adapter';
newFeature.properties.mode = 'polygon';
draw.setMode('static');
const { LatLngBounds } = await google.maps.importLibrary("core");
const { Data } = await google.maps.importLibrary("maps");
map.addListener("click", () => {
if (draw) {
draw.on('ready', () => {
setupModeButtons();
draw.setMode('point');
currentMode = 'point';
setActiveButton('point-mode');
draw.on("select", (id) => {
draw.on("change", (ids, type) => {
if (isRestoring) {
return;
redoHistory = [];
link.download = "drawing.geojson";
link.click();
URL.revokeObjectURL(url);
resizeButton.classList.toggle('active', resizingEnabled);
draw.clear();
draw.addFeatures(snapshotToRestore);
setTimeout(() => { isRestoring = false; }, 0);
isRestoring = true;
draw.clear();
draw.addFeatures(snapshot);
setTimeout(() => { isRestoring = false; }, 0);
return newFeature;
y += point[1];
count++;
html,
body {
<html>
<head>
<title>Terra Draw with Google Maps API Sample</title>
<link rel="stylesheet" href="./style.css">
<!-- Terra Draw CSS (if any needed, add here) -->
</head>
<body>
<!-- Map Container -->
<div id="map"></div>

<!-- Top-right mode selection UI -->
<div id="mode-ui">
<button id="point-mode" class="mode-button" title="Point"><img src="./img/point.svg" alt="Point" draggable="false"></button>
<button id="linestring-mode" class="mode-button" title="Linestring"><img src="./img/polyline.svg" alt="Linestring" draggable="false"></button>
<button id="polygon-mode" class="mode-button active" title="Polygon"><img src="./img/polygon.png" alt="Polygon" draggable="false"></button>
<button id="rectangle-mode" class="mode-button" title="Rectangle"><img src="./img/rectangle.svg" alt="Rectangle" draggable="false"></button>
<button id="circle-mode" class="mode-button" title="Circle"><img src="./img/circle.svg" alt="Circle" draggable="false"></button>
<button id="freehand-mode" class="mode-button" title="Freehand"><img src="./img/freehand.svg" alt="Freehand" draggable="false"></button>
<button id="select-mode" class="mode-button" title="Select"><img src="./img/select.svg" alt="Select" draggable="false"></button>
<button id="resize-button" class="mode-button" title="Resize"><img src="./img/resize.svg" alt="Resize" draggable="false"></button>
<button id="clear-mode" class="mode-button" title="Clear"><img src="./img/delete.svg" alt="Clear" draggable="false"></button>
<button id="delete-selected-button" class="mode-button" title="Clear last or Selected"><img src="./img/delete-selected.svg" alt="Delete Selected" draggable="false"></button>
<button id="undo-button" class="mode-button" title="Undo"><img src="./img/undo.svg" alt="Undo" draggable="false"></button>
<button id="redo-button" class="mode-button" title="Redo"><img src="./img/redo.svg" alt="Redo" draggable="false"></button>
<button id="export-button" class="mode-button" title="Export"><img src="./img/download.svg" alt="Export" draggable="false"></button>
<button id="upload-button" class="mode-button" title="Upload"><img src="./img/upload.svg" alt="Upload" draggable="false"></button>
<input type="file" id="upload-input" style="display: none;" accept=".geojson,.json">
</div>

<script type="module" src="./index.ts"></script>
<!-- Google Maps API is loaded by the Loader in index.ts -->
</body>
</html>index.html [https://github.com/googlemaps-samples/js-api-samples/blob/aa0b5b60136edb03c5eac5627cebe9ef42868db4/dist/samples/map-drawing-terradraw/docs/index.html#L8-L40]

Try Sample

Clone Sample

Git and Node.js are required to run this sample locally. Follow these instructions [https://docs.npmjs.com/downloading-and-installing-node-js-and-npm] to install Node.js and NPM. The following commands clone, install dependencies and start the sample application.

git clone https://github.com/googlemaps-samples/js-api-samples.git
cd samples/map-drawing-terradraw
npm i
npm start

Key Steps for Integration

Load Libraries: Include the Google Maps JavaScript API script, followed by
the Terra Draw core and google-maps scripts. If you are using script tags:

<script src="https://unpkg.com/terra-draw@latest/dist/terra-draw.umd.js"></script>

<script src="https://unpkg.com/terra-draw-google-maps-adapter@latest/dist/terra-draw-google-maps-adapter.umd.js"></script>

Initialize Map: Create your standard google.maps.Map instance.
Create Adapter: Instantiate TerraDrawGoogleMapsAdapter, passing it the
google.maps library and your map instance to connect them.
Create TerraDraw: Create a TerraDraw instance, providing the adapter and an
array of the drawing modes you want to support.
Activate Drawing: Call draw.start() to enable the tool, then
draw.setMode('polygon') to select a drawing shape.
Capture Data: Listen to the draw.on('change', callback) event to get an
array of all drawn features as GeoJSON.

Send feedback