Source URL: https://developers.google.com/maps/documentation/javascript/examples/places-autocomplete-directions?hl=ko
Title: Place Autocomplete and Directions

Send feedback

Place Autocomplete and Directions

Stay organized with collections

Save and categorize content based on your preferences.

This sample allows a user to specify source and destination locations, and then
it uses the
DirectionsService [https://developers.google.com/maps/documentation/javascript/reference/directions#DirectionsService]
to calculate the route, and the
DirectionsRenderer [https://developers.google.com/maps/documentation/javascript/reference/directions#DirectionsRenderer]
to display the route.

For more information, see
Autocomplete for Addresses and Search Terms [https://developers.google.com/maps/documentation/javascript/places-autocomplete],
and the Directions Service [https://developers.google.com/maps/documentation/javascript/directions].

TypeScript

new AutocompleteDirectionsHandler(map);
this.originPlaceId = "";
this.destinationPlaceId = "";
this.travelMode = google.maps.TravelMode.WALKING;
this.directionsService = new google.maps.DirectionsService();
this.directionsRenderer = new google.maps.DirectionsRenderer();
this.directionsRenderer.setMap(map);

this.setupClickListener(
"changemode-walking",
google.maps.TravelMode.WALKING
this.setupClickListener(
"changemode-transit",
google.maps.TravelMode.TRANSIT
this.setupClickListener(
"changemode-driving",
google.maps.TravelMode.DRIVING

this.setupPlaceChangedListener(originAutocomplete, "ORIG");
this.setupPlaceChangedListener(destinationAutocomplete, "DEST");

this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(originInput);
this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(
destinationInput
this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(modeSelector);
this.route();
autocomplete: google.maps.places.Autocomplete,
mode: string
) {
autocomplete.bindTo("bounds", this.map);

autocomplete.addListener("place_changed", () => {
origin: { placeId: this.originPlaceId },
destination: { placeId: this.destinationPlaceId },
travelMode: this.travelMode,
originPlaceId;
destinationPlaceId;
travelMode;
directionsService;
directionsRenderer;
constructor(map) {
this.map = map;
this.originPlaceId = "";
this.destinationPlaceId = "";
this.travelMode = google.maps.TravelMode.WALKING;
this.directionsService = new google.maps.DirectionsService();
this.directionsRenderer = new google.maps.DirectionsRenderer();
this.directionsRenderer.setMap(map);

this.setupClickListener(
"changemode-walking",
google.maps.TravelMode.WALKING,
this.setupClickListener(
"changemode-transit",
google.maps.TravelMode.TRANSIT,
this.setupClickListener(
"changemode-driving",
google.maps.TravelMode.DRIVING,
this.setupPlaceChangedListener(originAutocomplete, "ORIG");
this.setupPlaceChangedListener(destinationAutocomplete, "DEST");
this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(originInput);
this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(
destinationInput,
this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(modeSelector);
this.route();
autocomplete.addListener("place_changed", () => {
origin: { placeId: this.originPlaceId },
destination: { placeId: this.destinationPlaceId },
travelMode: this.travelMode,
/*
* Always set the map height explicitly to define the size of the div element
* that contains the map.
*/
body {
<html>
<head>
<title>Place Autocomplete and Directions</title>

<link rel="stylesheet" type="text/css" href="./style.css" />
<script type="module" src="./index.js"></script>
</head>
<body>
<div style="display: none">
<input
id="origin-input"
class="controls"
type="text"
placeholder="Enter an origin location"
/>

<input
id="destination-input"
class="controls"
type="text"
placeholder="Enter a destination location"
/>

<div id="mode-selector" class="controls">
<input
type="radio"
name="type"
id="changemode-walking"
checked="checked"
/>
<label for="changemode-walking">Walking</label>

<input type="radio" name="type" id="changemode-transit" />
<label for="changemode-transit">Transit</label>

<input type="radio" name="type" id="changemode-driving" />
<label for="changemode-driving">Driving</label>
</div>
</div>

<div id="map"></div>

<!--
The `defer` attribute causes the script to execute after the full HTML
document has been parsed. For non-blocking uses, avoiding race conditions,
and consistent behavior across browsers, consider loading using Promises. See
https://developers.google.com/maps/documentation/javascript/load-maps-js-api
for more information.
-->
<script
src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB41DRUbKWJHPxaFjMAwdrzWzbVKartNGg&callback=initMap&libraries=places&v=weekly"
defer
></script>
</body>
</html>index.html [https://github.com/googlemaps/js-samples/blob/2683f7366fb27829401945d2a7e27d77ed2df8e5/dist/samples/places-autocomplete-directions/docs/index.html#L8-L62]

Try Sample

JSFiddle.net [https://jsfiddle.net/gh/get/library/pure/googlemaps/js-samples/tree/master/dist/samples/places-autocomplete-directions/jsfiddle]

Google Cloud Shell [https://ssh.cloud.google.com/cloudshell/editor?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fgooglemaps%2Fjs-samples&cloudshell_git_branch=sample-places-autocomplete-directions&cloudshell_tutorial=cloud_shell_instructions.md&cloudshell_workspace=.]

Clone Sample

Git and Node.js are required to run this sample locally. Follow these instructions [https://docs.npmjs.com/downloading-and-installing-node-js-and-npm] to install Node.js and NPM. The following commands clone, install dependencies and start the sample application.

git clone -b sample-places-autocomplete-directions https://github.com/googlemaps/js-samples.git
cd js-samples
npm i
npm start

Other samples can be tried by switching to any branch beginning with sample-SAMPLE_NAME.

git checkout sample-SAMPLE_NAME
npm i
npm start

Send feedback