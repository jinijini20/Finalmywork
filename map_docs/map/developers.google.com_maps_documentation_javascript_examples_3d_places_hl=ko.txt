Source URL: https://developers.google.com/maps/documentation/javascript/examples/3d/places?hl=ko
Title: Place Autocomplete

Send feedback

Place Autocomplete

Stay organized with collections

Save and categorize content based on your preferences.

The Place Autocomplete sample demonstrates how to use the Place Autocomplete widget [https://developers.google.com/maps/documentation/javascript/reference/places-widget#Autocomplete] to provide a type-ahead search box.

The radio buttons allow you to filter the types of predictions that the autocomplete returns.
The Strict Bounds option restricts the search to the area within the current viewport. If this option is not checked, then the API biases the search to the current viewport, but it does not restrict it.

When you select an autocomplete result the sample then calls the getPlace() [https://developers.google.com/maps/documentation/javascript/reference/places-widget#Autocomplete.getPlace] method, and then it opens an info window to display place details.

For more information, see the Autocomplete class [https://developers.google.com/maps/documentation/javascript/reference/places-widget#Autocomplete].

TypeScript

infowindow.setContent(infowindowContent);

anchorPoint: new google.maps.Point(0, -29),
marker.setVisible(false);

map.setZoom(17);
marker.setVisible(true);

infowindowContent.children["place-name"].textContent = place.name;
infowindowContent.children["place-address"].textContent =
place.formatted_address;
infowindow.open(map, marker);
input.value = "";
setupClickListener("changetype-address", ["address"]);
setupClickListener("changetype-establishment", ["establishment"]);
setupClickListener("changetype-geocode", ["geocode"]);
setupClickListener("changetype-cities", ["(cities)"]);
setupClickListener("changetype-regions", ["(regions)"]);

biasInputElement.addEventListener("change", () => {
if (biasInputElement.checked) {
autocomplete.bindTo("bounds", map);
autocomplete.setBounds({ east: 180, west: -180, north: 90, south: -90 });
strictBoundsInputElement.checked = biasInputElement.checked;
autocomplete.bindTo("bounds", map);

anchorPoint: new google.maps.Point(0, -29),
marker.setVisible(false);

map.setZoom(17);
marker.setVisible(true);
infowindowContent.children["place-name"].textContent = place.name;
infowindowContent.children["place-address"].textContent =
place.formatted_address;
infowindow.open(map, marker);
input.value = "";
setupClickListener("changetype-address", ["address"]);
setupClickListener("changetype-establishment", ["establishment"]);
setupClickListener("changetype-geocode", ["geocode"]);
setupClickListener("changetype-cities", ["(cities)"]);
setupClickListener("changetype-regions", ["(regions)"]);
biasInputElement.addEventListener("change", () => {
if (biasInputElement.checked) {
autocomplete.bindTo("bounds", map);
autocomplete.setBounds({ east: 180, west: -180, north: 90, south: -90 });
strictBoundsInputElement.checked = biasInputElement.checked;
autocomplete.bindTo("bounds", map);
/*
* Always set the map height explicitly to define the size of the div element
* that contains the map.
*/
body {
<html>
<head>
<title>Place Autocomplete</title>

<link rel="stylesheet" type="text/css" href="./style.css" />
<script type="module" src="./index.js"></script>
</head>
<body>
<div class="pac-card" id="pac-card">
<div>
<div id="title">Autocomplete search</div>
<div id="type-selector" class="pac-controls">
<input
type="radio"
name="type"
id="changetype-all"
checked="checked"
/>
<label for="changetype-all">All</label>

<input type="radio" name="type" id="changetype-establishment" />
<label for="changetype-establishment">establishment</label>

<input type="radio" name="type" id="changetype-address" />
<label for="changetype-address">address</label>

<input type="radio" name="type" id="changetype-geocode" />
<label for="changetype-geocode">geocode</label>

<input type="radio" name="type" id="changetype-cities" />
<label for="changetype-cities">(cities)</label>

<input type="radio" name="type" id="changetype-regions" />
<label for="changetype-regions">(regions)</label>
</div>
<br />
<div id="strict-bounds-selector" class="pac-controls">
<input type="checkbox" id="use-location-bias" value="" checked />
<label for="use-location-bias">Bias to map viewport</label>

<input type="checkbox" id="use-strict-bounds" value="" />
<label for="use-strict-bounds">Strict bounds</label>
</div>
</div>
<div id="pac-container">
<input id="pac-input" type="text" placeholder="Enter a location" />
</div>
</div>
<div id="map"></div>
<div id="infowindow-content">
<span id="place-name" class="title"></span><br />
<span id="place-address"></span>
</div>

<!--
The `defer` attribute causes the script to execute after the full HTML
document has been parsed. For non-blocking uses, avoiding race conditions,
and consistent behavior across browsers, consider loading using Promises. See
https://developers.google.com/maps/documentation/javascript/load-maps-js-api
for more information.
-->
<script
src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB41DRUbKWJHPxaFjMAwdrzWzbVKartNGg&callback=initMap&libraries=places&v=weekly"
defer
></script>
</body>
</html>index.html [https://github.com/googlemaps/js-samples/blob/2683f7366fb27829401945d2a7e27d77ed2df8e5/dist/samples/places-autocomplete/docs/index.html#L8-L74]

Try Sample

JSFiddle.net [https://jsfiddle.net/gh/get/library/pure/googlemaps/js-samples/tree/master/dist/samples/places-autocomplete/jsfiddle]

Google Cloud Shell [https://ssh.cloud.google.com/cloudshell/editor?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fgooglemaps%2Fjs-samples&cloudshell_git_branch=sample-places-autocomplete&cloudshell_tutorial=cloud_shell_instructions.md&cloudshell_workspace=.]

Clone Sample

Git and Node.js are required to run this sample locally. Follow these instructions [https://docs.npmjs.com/downloading-and-installing-node-js-and-npm] to install Node.js and NPM. The following commands clone, install dependencies and start the sample application.

git clone -b sample-places-autocomplete https://github.com/googlemaps/js-samples.git
cd js-samples
npm i
npm start

Other samples can be tried by switching to any branch beginning with sample-SAMPLE_NAME.

git checkout sample-SAMPLE_NAME
npm i
npm start

Use the Place Picker component

The place picker component is a text input that allows end users to search for a
specific address or place using autocomplete. It is part of the
Extended Component Library [https://github.com/googlemaps/extended-component-library],
a set of web components that help developers build better maps and location features faster.

Use the Place Picker configurator [https://configure.mapsplatform.google/place-picker]
to create embeddable code for a custom Place Picker component, then export
it to be used with popular frameworks like React and Angular or no framework at all.

Send feedback