Source URL: https://developers.google.com/maps/documentation/javascript/examples/geocoding-simple?hl=ko
Title: Geocoding Service

Send feedback

Geocoding Service

Stay organized with collections

Save and categorize content based on your preferences.

This example creates a map along with a text input field and a button. When you
click the "geocode" button, the sample sends a geocoding request, then pans the
map to the geocoded location.

Read the documentation [https://developers.google.com/maps/documentation/javascript/geocoding].

TypeScript

inputText.placeholder = "Enter a location";

submitButton.value = "Geocode";
submitButton.classList.add("button", "button-primary");

clearButton.value = "Clear";
clearButton.classList.add("button", "button-secondary");

response = document.createElement("pre");
response.id = "response";
response.innerText = "";

responseDiv = document.createElement("div");
responseDiv.id = "response-container";
responseDiv.appendChild(response);

instructionsElement.innerHTML =
"<strong>Instructions</strong>: Enter an address in the textbox to geocode or click on the map to reverse geocode.";

map.controls[google.maps.ControlPosition.TOP_LEFT].push(inputText);
map.controls[google.maps.ControlPosition.TOP_LEFT].push(submitButton);
map.controls[google.maps.ControlPosition.TOP_LEFT].push(clearButton);
map.controls[google.maps.ControlPosition.LEFT_TOP].push(instructionsElement);
map.controls[google.maps.ControlPosition.LEFT_TOP].push(responseDiv);

marker = new google.maps.Marker({
map,
geocode({ address: inputText.value })

clearButton.addEventListener("click", () => {
clear();
responseDiv.style.display = "none";

geocoder
.geocode(request)
.then((result) => {
const { results } = result;

map.setCenter(results[0].geometry.location);
marker.setPosition(results[0].geometry.location);
marker.setMap(map);
responseDiv.style.display = "block";
response.innerText = JSON.stringify(result, null, 2);
return results;

inputText.placeholder = "Enter a location";

submitButton.value = "Geocode";
submitButton.classList.add("button", "button-primary");

clearButton.value = "Clear";
clearButton.classList.add("button", "button-secondary");
response = document.createElement("pre");
response.id = "response";
response.innerText = "";
responseDiv = document.createElement("div");
responseDiv.id = "response-container";
responseDiv.appendChild(response);

instructionsElement.innerHTML =
"<strong>Instructions</strong>: Enter an address in the textbox to geocode or click on the map to reverse geocode.";
map.controls[google.maps.ControlPosition.TOP_LEFT].push(inputText);
map.controls[google.maps.ControlPosition.TOP_LEFT].push(submitButton);
map.controls[google.maps.ControlPosition.TOP_LEFT].push(clearButton);
map.controls[google.maps.ControlPosition.LEFT_TOP].push(instructionsElement);
map.controls[google.maps.ControlPosition.LEFT_TOP].push(responseDiv);
marker = new google.maps.Marker({
map,
geocode({ address: inputText.value }),
clearButton.addEventListener("click", () => {
clear();
responseDiv.style.display = "none";
geocoder
.geocode(request)
.then((result) => {
const { results } = result;

map.setCenter(results[0].geometry.location);
marker.setPosition(results[0].geometry.location);
marker.setMap(map);
responseDiv.style.display = "block";
response.innerText = JSON.stringify(result, null, 2);
return results;
/*
* Always set the map height explicitly to define the size of the div element
* that contains the map.
*/
body {
<html>
<head>
<title>Geocoding Service</title>

<link rel="stylesheet" type="text/css" href="./style.css" />
<script type="module" src="./index.js"></script>
</head>
<body>
<div id="map"></div>

<!--
The `defer` attribute causes the script to execute after the full HTML
document has been parsed. For non-blocking uses, avoiding race conditions,
and consistent behavior across browsers, consider loading using Promises. See
https://developers.google.com/maps/documentation/javascript/load-maps-js-api
for more information.
-->
<script
src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB41DRUbKWJHPxaFjMAwdrzWzbVKartNGg&callback=initMap&v=weekly"
defer
></script>
</body>
</html>index.html [https://github.com/googlemaps/js-samples/blob/2683f7366fb27829401945d2a7e27d77ed2df8e5/dist/samples/geocoding-simple/docs/index.html#L8-L30]

Try Sample

JSFiddle.net [https://jsfiddle.net/gh/get/library/pure/googlemaps/js-samples/tree/master/dist/samples/geocoding-simple/jsfiddle]

Google Cloud Shell [https://ssh.cloud.google.com/cloudshell/editor?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fgooglemaps%2Fjs-samples&cloudshell_git_branch=sample-geocoding-simple&cloudshell_tutorial=cloud_shell_instructions.md&cloudshell_workspace=.]

Clone Sample

Git and Node.js are required to run this sample locally. Follow these instructions [https://docs.npmjs.com/downloading-and-installing-node-js-and-npm] to install Node.js and NPM. The following commands clone, install dependencies and start the sample application.

git clone -b sample-geocoding-simple https://github.com/googlemaps/js-samples.git
cd js-samples
npm i
npm start

Other samples can be tried by switching to any branch beginning with sample-SAMPLE_NAME.

git checkout sample-SAMPLE_NAME
npm i
npm start

Send feedback