Source URL: https://developers.google.com/maps/documentation/javascript/examples/places-autocomplete-hotelsearch?hl=ko
Title: Place Autocomplete Hotel Search

Send feedback

Place Autocomplete Hotel Search

Stay organized with collections

Save and categorize content based on your preferences.

This example creates a map with a search box that finds all of the hotels in a
specified place within a given country. The map then displays markers for all of
the hotels returned, with on-click details for each hotel.

Read the
documentation [https://developers.google.com/maps/documentation/javascript/places-autocomplete#map_controls].

TypeScript
> = {
au: {
center: { lat: -25.3, lng: 133.8 },
zoom: 4,
places = new google.maps.places.PlacesService(map);

autocomplete.addListener("place_changed", onPlaceChanged);

map.setZoom(15);
search();
search,
(
results: google.maps.places.PlaceResult[] | null,
status: google.maps.places.PlacesServiceStatus,
pagination: google.maps.places.PlaceSearchPagination | null
) => {
if (status === google.maps.places.PlacesServiceStatus.OK && results) {
clearResults();
clearMarkers();

google.maps.event.addListener(markers[i], "click", showInfoWindow);
setTimeout(dropMarker(i), i * 100);
addResult(results[i], i);

if (country == "all") {
autocomplete.setComponentRestrictions({ country: [] });
map.setCenter({ lat: 15, lng: 0 });
map.setZoom(2);
map.setCenter(countries[country].center);
map.setZoom(countries[country].zoom);
clearMarkers();

tr.onclick = function () {
google.maps.event.trigger(markers[i], "click");
icon.setAttribute("class", "placeIcon");
icon.setAttribute("className", "placeIcon");

nameTd.appendChild(name);
tr.appendChild(iconTd);
tr.appendChild(nameTd);
results.appendChild(tr);
(place, status) => {
if (status !== google.maps.places.PlacesServiceStatus.OK) {
return;
buildIWContent(place);
(document.getElementById("iw-url") as HTMLElement).innerHTML =
'<b><a href="' + place.url + '">' + place.name + "</a></b>";
(document.getElementById("iw-address") as HTMLElement).textContent =
place.vicinity;

if (place.formatted_phone_number) {
(document.getElementById("iw-phone-row") as HTMLElement).style.display = "";
(document.getElementById("iw-phone") as HTMLElement).textContent =
place.formatted_phone_number;
(document.getElementById("iw-rating") as HTMLElement).innerHTML =
ratingHtml;
fullUrl = website;
(document.getElementById("iw-website") as HTMLElement).textContent =
website;
places = new google.maps.places.PlacesService(map);
autocomplete.addListener("place_changed", onPlaceChanged);
.getElementById("country")
.addEventListener("change", setAutocompleteCountry);
map.setZoom(15);
search();
clearMarkers();

google.maps.event.addListener(markers[i], "click", showInfoWindow);
setTimeout(dropMarker(i), i * 100);
addResult(results[i], i);
map.setCenter({ lat: 15, lng: 0 });
map.setZoom(2);
map.setCenter(countries[country].center);
map.setZoom(countries[country].zoom);
clearMarkers();
tr.onclick = function () {
google.maps.event.trigger(markers[i], "click");
icon.setAttribute("class", "placeIcon");
icon.setAttribute("className", "placeIcon");

nameTd.appendChild(name);
tr.appendChild(iconTd);
tr.appendChild(nameTd);
results.appendChild(tr);
(place, status) => {
if (status !== google.maps.places.PlacesServiceStatus.OK) {
return;
buildIWContent(place);
fullUrl = website;
/*
* Always set the map height explicitly to define the size of the div element
* that contains the map.
*/
body {
<html>
<head>
<title>Place Autocomplete Hotel Search</title>

<link rel="stylesheet" type="text/css" href="./style.css" />
<script type="module" src="./index.js"></script>
</head>
<body>
<div class="hotel-search">
<div id="findhotels">Find hotels in:</div>

<div id="locationField">
<input id="autocomplete" placeholder="Enter a city" type="text" />
</div>

<div id="controls">
<select id="country">
<option value="all">All</option>
<option value="au">Australia</option>
<option value="br">Brazil</option>
<option value="ca">Canada</option>
<option value="fr">France</option>
<option value="de">Germany</option>
<option value="mx">Mexico</option>
<option value="nz">New Zealand</option>
<option value="it">Italy</option>
<option value="za">South Africa</option>
<option value="es">Spain</option>
<option value="pt">Portugal</option>
<option value="us" selected>U.S.A.</option>
<option value="uk">United Kingdom</option>
</select>
</div>
</div>

<div id="map"></div>

<div id="listing">
<table id="resultsTable">
<tbody id="results"></tbody>
</table>
</div>

<div style="display: none">
<div id="info-content">
<table>
<tr id="iw-url-row" class="iw_table_row">
<td id="iw-icon" class="iw_table_icon"></td>
<td id="iw-url"></td>
</tr>
<tr id="iw-address-row" class="iw_table_row">
<td class="iw_attribute_name">Address:</td>
<td id="iw-address"></td>
</tr>
<tr id="iw-phone-row" class="iw_table_row">
<td class="iw_attribute_name">Telephone:</td>
<td id="iw-phone"></td>
</tr>
<tr id="iw-rating-row" class="iw_table_row">
<td class="iw_attribute_name">Rating:</td>
<td id="iw-rating"></td>
</tr>
<tr id="iw-website-row" class="iw_table_row">
<td class="iw_attribute_name">Website:</td>
<td id="iw-website"></td>
</tr>
</table>
</div>
</div>

<!--
The `defer` attribute causes the script to execute after the full HTML
document has been parsed. For non-blocking uses, avoiding race conditions,
and consistent behavior across browsers, consider loading using Promises. See
https://developers.google.com/maps/documentation/javascript/load-maps-js-api
for more information.
-->
<script
src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB41DRUbKWJHPxaFjMAwdrzWzbVKartNGg&callback=initMap&libraries=places&v=weekly"
defer
></script>
</body>
</html>index.html [https://github.com/googlemaps/js-samples/blob/2683f7366fb27829401945d2a7e27d77ed2df8e5/dist/samples/places-autocomplete-hotelsearch/docs/index.html#L8-L90]

Try Sample

JSFiddle.net [https://jsfiddle.net/gh/get/library/pure/googlemaps/js-samples/tree/master/dist/samples/places-autocomplete-hotelsearch/jsfiddle]

Google Cloud Shell [https://ssh.cloud.google.com/cloudshell/editor?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fgooglemaps%2Fjs-samples&cloudshell_git_branch=sample-places-autocomplete-hotelsearch&cloudshell_tutorial=cloud_shell_instructions.md&cloudshell_workspace=.]

Clone Sample

Git and Node.js are required to run this sample locally. Follow these instructions [https://docs.npmjs.com/downloading-and-installing-node-js-and-npm] to install Node.js and NPM. The following commands clone, install dependencies and start the sample application.

git clone -b sample-places-autocomplete-hotelsearch https://github.com/googlemaps/js-samples.git
cd js-samples
npm i
npm start

Other samples can be tried by switching to any branch beginning with sample-SAMPLE_NAME.

git checkout sample-SAMPLE_NAME
npm i
npm start

Send feedback