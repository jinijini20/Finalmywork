Source URL: https://developers.google.com/maps/documentation/javascript/examples/puzzle?hl=ko
Title: Map Puzzle

Send feedback

Map Puzzle

Stay organized with collections

Save and categorize content based on your preferences.

More complex demo, showing a game with draggable polygons. See the
draggable
polygon [https://developers.google.com/maps/documentation/javascript/examples/polygon-draggable] demo for a simple demo with draggable polygons.

TypeScript
interface Country {
private polys_: google.maps.Polygon[] = [];
private difficulty_ = "Easy";
private count_ = 0;
private pieceDiv_: HTMLElement;
private timeDiv_: HTMLElement;
private dataLoaded_ = false;
private NUM_PIECES_ = 10;
private countries_: Country[] = [];
private timer_ = 0;
private START_COLOR_ = "#3c79de";
private END_COLOR_ = "#037e29";

constructor(map: google.maps.Map) {
this.map_ = map;
this.pieceDiv_ = document.createElement("div");
this.timeDiv_ = document.createElement("div");
this.createMenu_();
this.setDifficultyStyle_();
this.loadData_();
"margin: 40px 10px; border-radius: 8px; height: 320px; width: 180px;" +
"background-color: white; font-size: 14px; font-family: Roboto;" +
"text-align: center; color: grey;line-height: 32px; overflow: hidden";

"width: 100%; background-color: #4285f4; color: white; font-size: 20px;" +
"line-height: 40px;margin-bottom: 24px";
titleDiv.innerText = "Game Options";

pieceTitleDiv.style.fontWeight = "800";

timeTitleDiv.style.fontWeight = "800";

difficultyTitleDiv.style.fontWeight = "800";

option.innerText = level;
difficultySelect.appendChild(option);
"border: 2px solid lightgrey; background-color: white; color: #4275f4;" +
"padding: 6px;";

difficultySelect.onchange = () => {
this.setDifficulty_(difficultySelect.value);
this.resetGame_();
resetDiv.style.cssText =
"cursor: pointer; border-top: 1px solid lightgrey; margin-top: 18px;" +
"color: #4275f4; line-height: 40px; font-weight: 800";
resetDiv.onclick = this.resetGame_.bind(this);
menuDiv.appendChild(titleDiv);
menuDiv.appendChild(pieceTitleDiv);
menuDiv.appendChild(pieceDiv);
menuDiv.appendChild(timeTitleDiv);
menuDiv.appendChild(timeDiv);
menuDiv.appendChild(difficultyTitleDiv);
menuDiv.appendChild(difficultySelect);
menuDiv.appendChild(resetDiv);
this.map_.controls[google.maps.ControlPosition.TOP_LEFT].push(menuDiv);
xmlhttpRequest.status != 200 ||
xmlhttpRequest.readyState != XMLHttpRequest.DONE
return;

this.loadDataComplete_(JSON.parse(xmlhttpRequest.responseText) as any);
"GET",
"https://storage.googleapis.com/mapsdevsite/json/puzzle.json",
true
xmlhttpRequest.send(null);
this.countries_ = data;
this.start_();

if (this.map_) {
this.setDifficultyStyle_();
this.count_ = 0;
this.setCount_();
this.startClock_();

this.addRandomCountries_();

if (this.count_ == this.NUM_PIECES_) {
this.stopClock_();

bounds: number[][],
poly: google.maps.Polygon
): boolean {
new google.maps.LatLng(bounds[1][0], bounds[1][1])
this.count_++;
this.setCount_();
this.resetGame_();

new PuzzleDemo(map);
class PuzzleDemo {
map_;
polys_ = [];
difficulty_ = "Easy";
count_ = 0;
pieceDiv_;
timeDiv_;
dataLoaded_ = false;
NUM_PIECES_ = 10;
countries_ = [];
timer_ = 0;
START_COLOR_ = "#3c79de";
END_COLOR_ = "#037e29";
constructor(map) {
this.map_ = map;
this.pieceDiv_ = document.createElement("div");
this.timeDiv_ = document.createElement("div");
this.createMenu_();
this.setDifficultyStyle_();
this.loadData_();
"margin: 40px 10px; border-radius: 8px; height: 320px; width: 180px;" +
"background-color: white; font-size: 14px; font-family: Roboto;" +
"text-align: center; color: grey;line-height: 32px; overflow: hidden";

"width: 100%; background-color: #4285f4; color: white; font-size: 20px;" +
"line-height: 40px;margin-bottom: 24px";
titleDiv.innerText = "Game Options";

pieceTitleDiv.style.fontWeight = "800";

timeTitleDiv.style.fontWeight = "800";

difficultyTitleDiv.style.fontWeight = "800";

option.innerText = level;
difficultySelect.appendChild(option);
"border: 2px solid lightgrey; background-color: white; color: #4275f4;" +
"padding: 6px;";
difficultySelect.onchange = () => {
this.setDifficulty_(difficultySelect.value);
this.resetGame_();
resetDiv.style.cssText =
"cursor: pointer; border-top: 1px solid lightgrey; margin-top: 18px;" +
"color: #4275f4; line-height: 40px; font-weight: 800";
resetDiv.onclick = this.resetGame_.bind(this);
menuDiv.appendChild(titleDiv);
menuDiv.appendChild(pieceTitleDiv);
menuDiv.appendChild(pieceDiv);
menuDiv.appendChild(timeTitleDiv);
menuDiv.appendChild(timeDiv);
menuDiv.appendChild(difficultyTitleDiv);
menuDiv.appendChild(difficultySelect);
menuDiv.appendChild(resetDiv);
this.map_.controls[google.maps.ControlPosition.TOP_LEFT].push(menuDiv);
xmlhttpRequest.status != 200 ||
xmlhttpRequest.readyState != XMLHttpRequest.DONE
return;

this.loadDataComplete_(JSON.parse(xmlhttpRequest.responseText));
"GET",
"https://storage.googleapis.com/mapsdevsite/json/puzzle.json",
true,
xmlhttpRequest.send(null);
this.countries_ = data;
this.start_();
if (this.map_) {
this.setDifficultyStyle_();
this.count_ = 0;
this.setCount_();
this.startClock_();
this.addRandomCountries_();
if (this.count_ == this.NUM_PIECES_) {
this.stopClock_();

new google.maps.LatLng(bounds[1][0], bounds[1][1]),
this.count_++;
this.setCount_();
this.resetGame_();
/*
* Always set the map height explicitly to define the size of the div element
* that contains the map.
*/
body {
<html>
<head>
<title>Map Puzzle</title>

<link rel="stylesheet" type="text/css" href="./style.css" />
<script type="module" src="./index.js"></script>
</head>
<body>
<div id="map"></div>

<!--
The `defer` attribute causes the script to execute after the full HTML
document has been parsed. For non-blocking uses, avoiding race conditions,
and consistent behavior across browsers, consider loading using Promises. See
https://developers.google.com/maps/documentation/javascript/load-maps-js-api
for more information.
-->
<script
src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB41DRUbKWJHPxaFjMAwdrzWzbVKartNGg&callback=initMap&libraries=geometry&v=weekly"
defer
></script>
</body>
</html>index.html [https://github.com/googlemaps/js-samples/blob/2683f7366fb27829401945d2a7e27d77ed2df8e5/dist/samples/map-puzzle/docs/index.html#L8-L30]

Try Sample

JSFiddle.net [https://jsfiddle.net/gh/get/library/pure/googlemaps/js-samples/tree/master/dist/samples/map-puzzle/jsfiddle]

Google Cloud Shell [https://ssh.cloud.google.com/cloudshell/editor?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fgooglemaps%2Fjs-samples&cloudshell_git_branch=sample-map-puzzle&cloudshell_tutorial=cloud_shell_instructions.md&cloudshell_workspace=.]

Clone Sample

Git and Node.js are required to run this sample locally. Follow these instructions [https://docs.npmjs.com/downloading-and-installing-node-js-and-npm] to install Node.js and NPM. The following commands clone, install dependencies and start the sample application.

git clone -b sample-map-puzzle https://github.com/googlemaps/js-samples.git
cd js-samples
npm i
npm start

Other samples can be tried by switching to any branch beginning with sample-SAMPLE_NAME.

git checkout sample-SAMPLE_NAME
npm i
npm start

Send feedback