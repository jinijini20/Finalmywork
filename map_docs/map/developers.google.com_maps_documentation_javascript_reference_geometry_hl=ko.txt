Source URL: https://developers.google.com/maps/documentation/javascript/reference/geometry?hl=ko
Title: Geometry Library

의견 보내기

Geometry Library

컬렉션을 사용해 정리하기

내 환경설정을 기준으로 콘텐츠를 저장하고 분류하세요.

encoding [https://developers.google.com/maps/documentation/javascript/reference/geometry?hl=ko#encoding] 네임스페이스

google.maps.geometry.encoding 네임스페이스

폴리라인 인코딩 및 디코딩을 위한 유틸리티입니다.
const {encoding} = await google.maps.importLibrary("geometry")를 호출하여 액세스합니다. Maps JavaScript API의 라이브러리 [https://developers.google.com/maps/documentation/javascript/libraries?hl=ko]를 참고하세요.
| 정적 메소드 |
| --- |
| decodePath | decodePath(encodedPath) 매개변수:  encodedPath:  string 반환 값:  Array<LatLng> 인코딩된 경로 문자열을 일련의 LatLng로 디코딩합니다. |
| encodePath | encodePath(path) 매개변수:  path:  Array<LatLng\|LatLngLiteral>\|MVCArray<LatLng\|LatLngLiteral> 반환 값:  string 일련의 LatLng를 인코딩된 경로 문자열로 인코딩합니다. |

spherical [https://developers.google.com/maps/documentation/javascript/reference/geometry?hl=ko#spherical] 클래스

google.maps.geometry.spherical 클래스

측지선 각도, 거리 및 영역을 계산하기 위한 유틸리티 함수입니다.  기본 반경은 6378137 미터의 지구 반지름입니다.
const {spherical} = await google.maps.importLibrary("geometry")를 호출하여 액세스합니다. Maps JavaScript API의 라이브러리 [https://developers.google.com/maps/documentation/javascript/libraries?hl=ko]를 참고하세요.
| 정적 메소드 |
| --- |
| computeArea | computeArea(path[, radiusOfSphere]) 매개변수:  path:  Array<LatLng\|LatLngLiteral>\|MVCArray<LatLng\|LatLngLiteral>\|Circle\|CircleLiteral\|LatLngBounds\|LatLngBoundsLiteral radiusOfSphere:  number optional 반환 값:  number 닫힌 경로의 부호가 지정되지 않은 면적을 [0, 2×pi×반지름²] 범위로 반환합니다. 계산된 면적은 반지름과 동일한 단위를 사용합니다. radiusOfSphere는 기본적으로 지구의 반경(단위: 미터)으로, 이 경우 면적은 제곱미터로 표시됩니다. Circle를 전달하려면 radius를 0이 아닌 값으로 설정해야 합니다. 또한 원이 구의 100% 를 가리지 않아야 합니다. LatLngBounds를 전달할 때 남쪽 LatLng가 북쪽 LatLng보다 북쪽에 있을 수 없습니다. |
| computeDistanceBetween | computeDistanceBetween(from, to[, radius]) 매개변수:  from:  LatLng\|LatLngLiteral to:  LatLng\|LatLngLiteral radius:  number optional 반환 값:  number 두 LatLng 간의 거리(단위: 미터)를 반환합니다. 원하는 경우 맞춤 반경을 지정할 수 있습니다. 반경은 기본적으로 지구의 반경으로 설정됩니다. |
| computeHeading | computeHeading(from, to) 매개변수:  from:  LatLng\|LatLngLiteral to:  LatLng\|LatLngLiteral 반환 값:  number 한 LatLng에서 다른 LatLng로의 방향을 반환합니다. 방향은 북쪽에서 시계 방향으로 [-180,180) 범위 내의 도 단위로 표현됩니다. |
| computeLength | computeLength(path[, radius]) 매개변수:  path:  Array<LatLng\|LatLngLiteral>\|MVCArray<LatLng\|LatLngLiteral> radius:  number optional 반환 값:  number 지정된 경로의 길이를 반환합니다. |
| computeOffset | computeOffset(from, distance, heading[, radius]) 매개변수:  from:  LatLng\|LatLngLiteral distance:  number heading:  number radius:  number optional 반환 값:  LatLng 지정된 방향 (북쪽에서 시계 방향으로 도 단위로 표현)으로 원점에서 거리를 이동한 결과로 생성된 LatLng를 반환합니다. |
| computeOffsetOrigin | computeOffsetOrigin(to, distance, heading[, radius]) 매개변수:  to:  LatLng\|LatLngLiteral distance:  number heading:  number radius:  number optional 반환 값:  LatLng\|null LatLng 대상, 이동 거리, 원래 방향이 제공된 경우 출발 위치를 반환합니다. 방향은 북쪽에서 시계 방향으로 도 단위로 표시됩니다. 이 함수는 사용 가능한 솔루션이 없으면 null을 반환합니다. |
| computeSignedArea | computeSignedArea(loop[, radius]) 매개변수:  loop:  Array<LatLng\|LatLngLiteral>\|MVCArray<LatLng\|LatLngLiteral> radius:  number optional 반환 값:  number 닫힌 경로의 부호가 지정된 면적을 반환합니다. 여기서 시계 반대 방향은 양수이며 범위는 [-2×pi×radius², 2×pi×radius²]입니다. 계산된 면적은 반지름과 동일한 단위를 사용합니다. 반경은 기본적으로 지구의 반경(단위: 미터)으로 설정되며 이 경우 면적은 제곱미터로 표시됩니다.  면적은 평행 수송 메서드를 사용하여 계산됩니다. 단위 구체의 폐쇄된 경로 주위의 평행 수송은 경로로 둘러싸인 면적과 동일한 각도로 비틀립니다. 이는 각 삼각형에서 Girard, l'Huilier 또는 Eriksson을 사용하는 삼각측량보다 간단하고 정확하며 강력합니다. 특히 삼각 측정을 하지 않으므로 다각형의 가장자리 (대각선이 아님)가 180도에 걸리는 불가피한 경우를 제외하고는 불안정하지 않습니다. |
| interpolate | interpolate(from, to, fraction) 매개변수:  from:  LatLng\|LatLngLiteral to:  LatLng\|LatLngLiteral fraction:  number 반환 값:  LatLng 출발 LatLng와 도착 LatLng 사이의 경로에서 지정된 비율에 해당하는 지점의 LatLng를 반환합니다. |

poly [https://developers.google.com/maps/documentation/javascript/reference/geometry?hl=ko#poly] 클래스

google.maps.geometry.poly 클래스

다각형 및 다중선과 관련된 계산을 위한 유틸리티 함수입니다.
const {poly} = await google.maps.importLibrary("geometry")를 호출하여 액세스합니다. Maps JavaScript API의 라이브러리 [https://developers.google.com/maps/documentation/javascript/libraries?hl=ko]를 참고하세요.
| 정적 메소드 |
| --- |
| containsLocation | containsLocation(point, polygon) 매개변수:  point:  LatLng\|LatLngLiteral polygon:  Polygon 반환 값:  boolean 지정된 점이 지정된 다각형 내에 있는지 계산합니다. |
| isLocationOnEdge | isLocationOnEdge(point, poly[, tolerance]) 매개변수:  point:  LatLng\|LatLngLiteral poly:  Polygon\|Polyline tolerance:  number optional 반환 값:  boolean 지정된 점이 지정된 허용 오차 내에서 다중선 또는 다각형 가장자리 위나 근처에 있는지 계산합니다. 제공된 점의 위도와 경도와 가장자리에서 가장 가까운 점의 차이가 허용 오차보다 작으면 true를 반환합니다. 허용 오차의 기본값은 10-9도입니다. |

의견 보내기