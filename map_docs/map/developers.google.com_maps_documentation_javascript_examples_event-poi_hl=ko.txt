Source URL: https://developers.google.com/maps/documentation/javascript/examples/event-poi?hl=ko
Title: POI Click Events

Send feedback

POI Click Events

Stay organized with collections

Save and categorize content based on your preferences.

This example demonstrates the use of click event listeners on POIs (points of
interest). It listens for the click event on a POI icon and then
uses the placeId from the event data with a
directionsService.route request to calculate and display a route to
the clicked place. It also uses the placeId to get more details of
the place.

Read the documentation [https://developers.google.com/maps/documentation/javascript/events].

TypeScript
function initMap(): void {

new ClickEventHandler(map, origin);
e: google.maps.MapMouseEvent | google.maps.IconMouseEvent
): e is google.maps.IconMouseEvent {
return "placeId" in e;
this.map = map;
this.directionsService = new google.maps.DirectionsService();
this.directionsRenderer = new google.maps.DirectionsRenderer();
this.directionsRenderer.setMap(map);
this.placesService = new google.maps.places.PlacesService(map);
this.infowindow = new google.maps.InfoWindow();
this.infowindowContent = document.getElementById(
"infowindow-content"
) as HTMLElement;
this.infowindow.setContent(this.infowindowContent);

if (event.placeId) {
this.calculateAndDisplayRoute(event.placeId);
this.getPlaceInformation(event.placeId);
.route({
origin: this.origin,
destination: { placeId: placeId },
travelMode: google.maps.TravelMode.WALKING,
(
place: google.maps.places.PlaceResult | null,
status: google.maps.places.PlacesServiceStatus
) => {
if (
status === "OK" &&
place &&
place.geometry &&
place.geometry.location
) {
me.infowindow.close();
me.infowindow.setPosition(place.geometry.location);
(
me.infowindowContent.children["place-icon"] as HTMLImageElement
).src = place.icon as string;
(
me.infowindowContent.children["place-name"] as HTMLElement
).textContent = place.name!;
(
me.infowindowContent.children["place-id"] as HTMLElement
).textContent = place.place_id as string;
(
me.infowindowContent.children["place-address"] as HTMLElement
).textContent = place.formatted_address as string;
me.infowindow.open(me.map);
function initMap() {
map;
directionsService;
directionsRenderer;
placesService;
infowindow;
infowindowContent;
constructor(map, origin) {
this.origin = origin;
this.map = map;
this.directionsService = new google.maps.DirectionsService();
this.directionsRenderer = new google.maps.DirectionsRenderer();
this.directionsRenderer.setMap(map);
this.placesService = new google.maps.places.PlacesService(map);
this.infowindow = new google.maps.InfoWindow();
this.infowindowContent = document.getElementById("infowindow-content");
this.infowindow.setContent(this.infowindowContent);
if (event.placeId) {
this.calculateAndDisplayRoute(event.placeId);
this.getPlaceInformation(event.placeId);
.route({
origin: this.origin,
destination: { placeId: placeId },
travelMode: google.maps.TravelMode.WALKING,
status === "OK" &&
place &&
place.geometry &&
place.geometry.location
) {
me.infowindow.close();
me.infowindow.setPosition(place.geometry.location);
me.infowindowContent.children["place-icon"].src = place.icon;
me.infowindowContent.children["place-name"].textContent = place.name;
me.infowindowContent.children["place-id"].textContent = place.place_id;
me.infowindowContent.children["place-address"].textContent =
place.formatted_address;
me.infowindow.open(me.map);
/* Always set the map height explicitly to define the size of the div
* element that contains the map. */
body {
<html>
<head>
<title>POI Click Events</title>

<link rel="stylesheet" type="text/css" href="./style.css" />
<script type="module" src="./index.js"></script>
</head>
<body>
<div id="map"></div>
<div id="infowindow-content">
<img id="place-icon" src="" height="16" width="16" />
<span id="place-name" class="title"></span><br />
Place ID <span id="place-id"></span><br />
<span id="place-address"></span>
</div>

<!--
The `defer` attribute causes the script to execute after the full HTML
document has been parsed. For non-blocking uses, avoiding race conditions,
and consistent behavior across browsers, consider loading using Promises. See
https://developers.google.com/maps/documentation/javascript/load-maps-js-api
for more information.
-->
<script
src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB41DRUbKWJHPxaFjMAwdrzWzbVKartNGg&callback=initMap&libraries=places&v=weekly"
defer
></script>
</body>
</html>index.html [https://github.com/googlemaps/js-samples/blob/2683f7366fb27829401945d2a7e27d77ed2df8e5/dist/samples/event-poi/docs/index.html#L8-L36]

Try Sample

JSFiddle.net [https://jsfiddle.net/gh/get/library/pure/googlemaps/js-samples/tree/master/dist/samples/event-poi/jsfiddle]

Google Cloud Shell [https://ssh.cloud.google.com/cloudshell/editor?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fgooglemaps%2Fjs-samples&cloudshell_git_branch=sample-event-poi&cloudshell_tutorial=cloud_shell_instructions.md&cloudshell_workspace=.]

Clone Sample

Git and Node.js are required to run this sample locally. Follow these instructions [https://docs.npmjs.com/downloading-and-installing-node-js-and-npm] to install Node.js and NPM. The following commands clone, install dependencies and start the sample application.

git clone -b sample-event-poi https://github.com/googlemaps/js-samples.git
cd js-samples
npm i
npm start

Other samples can be tried by switching to any branch beginning with sample-SAMPLE_NAME.

git checkout sample-SAMPLE_NAME
npm i
npm start

Send feedback