Source URL: https://developers.google.com/maps/documentation/places/ios-sdk/place-photos?hl=ko

이 페이지는 Cloud Translation API를 통해 번역되었습니다.
Switch to English
홈
제품
Google Maps Platform
문서
iOS
Places SDK for iOS
도움이 되었나요?
의견 보내기
장소 사진 (신규)
bookmark_border
출시 노트
이 페이지의 내용
이미지 요청
샘플 코드
캐싱
기여 분석
플랫폼 선택: Android iOS 웹 서비스
유럽 경제 지역 (EEA) 개발자
이 기능을 사용하려면 차세대 Places API인 Places API (New)를 사용 설정해야 합니다. 자세한 내용은 API 사용 설정을 참고하세요.
iOS용 Places SDK (신규)를 사용하여 애플리케이션에 표시할 장소 사진을 요청할 수 있습니다. 사진 서비스에서 반환되는 사진은 비즈니스 소유자 및 사용자 제공 사진을 비롯한 다양한 출처에서 가져온 것입니다.
사진은 UIImage 객체로 표현되는 비트맵 이미지입니다. 비트맵 이미지의 최대 크기는 4800x4800픽셀입니다.
이미지 요청
장소에 대해 최대 10장의 사진을 요청할 수 있습니다.
[GMSPlacesClient lookUpPhotosForPlaceID]를 호출하여 장소 ID와 GMSPlacePhotoMetadataResultCallback 콜백을 전달합니다. 이 요청은 GMSPlacePhotoMetadataList 객체를 사용하여 GMSPlacePhotoMetadataResultCallback 콜백을 호출합니다.
콜백의 GMSPlacePhotoMetadataList 객체에서 results 배열 속성에는 사진이 포함되며 각 사진은 GMSPlacePhotoMetadata 객체로 표시됩니다.
GMSPlacePhotoMetadata 객체를 사용하여 요청된 이미지의 최대 크기를 포함한 GMSFetchPhotoRequest를 만듭니다.
배열의 각 GMSPlacePhotoMetadata 객체에 대해 GMSFetchPhotoRequest 객체를 전달하여 [GMSPlacesClient fetchPhotoWithRequest:callback:]를 호출합니다. 이 메서드는 사용 가능한 비트맵 이미지를 UIImage로 사용하여 GMSFetchPhotoResultCallback 콜백을 호출합니다.
장소의 사진을 요청하는 또 다른 방법은 필드 목록에 GMSPlacePropertyPhotos를 포함하여 장소 세부정보 (신규) 요청을 하는 것입니다. 장소 세부정보 호출의 장점은 응답 GMSPlace 객체에 장소에 원하는 사진과 기타 데이터 필드가 포함될 수 있다는 것입니다.
참고: 앱에 장소 사진을 표시할 때는 항상 저작자 표시 가이드라인을 따라야 합니다. 자세한 내용은 저작자 표시를 참고하세요.
샘플 코드
다음 예시 메서드는 장소 ID를 가져와 반환된 목록의 첫 번째 사진을 가져옵니다. 이 메서드를 자체 앱에서 만들 메서드의 템플릿으로 사용할 수 있습니다.
--- 탭: Places Swift SDK ---
// First fetch place details
// A hotel in Saigon with an attribution.
let placeID = "ChIJV4k8_9UodTERU5KXbkYpSYs"
let fetchPlaceRequest = FetchPlaceRequest(
  placeID: placeID,
  placeProperties: [ . name, .website ]
)
var fetchedPlace: Place
switch await placesClient.fetchPlace(with: fetchPlaceRequest) {
case .success(let place):
  fetchedPlace = place
case .failure(let placesError):
  // Handle error
}

// Use the place details to fetch a photo's image.
guard let photo = fetchedPlace.photos?.first else {
  // Handle place without photos.
}
let fetchPhotoRequest =
  FetchPhotoRequest(photo: photo, maxSize: CGSizeMake(4800, 4800))
switch await placesClient.fetchPhoto(with: fetchPhotoRequest) {
case .success(let uiImage):
  // Handle image.
case .failure(let placesError):
  // Handle error
}

--- 탭: Swift ---
// A hotel in Saigon with an attribution.
let placeID = "ChIJV4k8_9UodTERU5KXbkYpSYs"

// Request list of photos for a place
placesClient.lookUpPhotos(forPlaceID: placeID) { (photos, error) in

  guard let photoMetadata: GMSPlacePhotoMetadata = photos?.results[0] else {
    return }

  // Request individual photos in the response list
  let fetchPhotoRequest = GMSFetchPhotoRequest(photoMetadata: photoMetadata, maxSize: CGSizeMake(4800, 4800))
  self.client.fetchPhoto(with: fetchPhotoRequest, callback: {
    (photoImage: UIImage?, error: Error?) in
      guard let photoImage, error == nil else {
        print("Handle photo error: ")
        return }
      print("Display photo Image: ")
    }
  )
}

--- 탭: Objective-C ---
// A hotel in Saigon with an attribution.
NSString *placeID = @"ChIJV4k8_9UodTERU5KXbkYpSYs";

[placesClient lookUpPhotosForPlaceID:placeID callback: ^(GMSPlacePhotoMetadataList *list, NSError *error) {
  GMSPlacePhotoMetadata *photoMetadata = [list results][0];

  // Request individual photos in the response list
  GMSFetchPhotoRequest *fetchPhotoRequest = [[GMSFetchPhotoRequest alloc] initWithPhotoMetadata:photoMetadata maxSize:CGSizeMake(4800, 4800)];
  [placesClient fetchPhotoWithRequest:fetchPhotoRequest callback: ^(UIImage *_Nullable photoImage, NSError *_Nullable error) {
    if (error == nil) {
      // Display photo
    }
  }];
}];
캐싱
[GMSPlacesClient loadPlacePhoto:callback:] 또는 [GMSPlacesClient loadPlacePhoto:constrainedToSize:scale:callback:]를 사용하여 로드된 사진은 공유 NSURLCache의 Foundation URL 로드 시스템에 의해 디스크와 메모리 모두에 캐시됩니다.
캐싱 동작을 구성하려면 애플리케이션 대리자의 application:didFinishLaunchingWithOptions: 메서드에서 [NSURLCache setSharedURLCache:]을 사용하여 공유 URL 캐시를 변경하면 됩니다.
애플리케이션이 iOS용 Places SDK와 NSURLCache를 공유하지 않도록 하려면 새 NSURLCache를 만들고 공유 캐시로 설정하지 않고 앱 내에서만 독점적으로 사용하면 됩니다.
기여 분석
대부분의 경우 장소 사진은 저작자 표시 없이 사용할 수 있거나 필수 저작권 표시가 이미지의 일부로 포함되어 있습니다. 하지만 반환된 GMSPlacePhotoMetadata 인스턴스에 attributions 또는 authorAttribution이 포함된 경우 이미지를 표시할 때마다 애플리케이션에 이러한 저작자 표시를 포함해야 합니다. 저작자 표시에 관한 문서를 참고하세요.
도움이 되었나요?
의견 보내기